<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<link href="/sites/Anugamdev/SiteAssets/AnugamStyles/css/main.css" rel="stylesheet">
<link href="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/css/dataTables.bootstrap.min.css"
      rel="stylesheet">
<link href="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/css/responsive.bootstrap.min.css"
      rel="stylesheet">
<link href="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/css/responsive.bootstrap.min.css"
      rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-timepicker/0.5.2/css/bootstrap-timepicker.min.css"
      rel="stylesheet">
<link href="/sites/Anugamdev/SiteAssets/AnugamStyles/Datepicker/css/custom.css" rel="stylesheet">
<link rel="stylesheet" href="/sites/Anugamdev/SiteAssets/AnugamStyles/Datepicker/css/datepicker.min.css" />
<!--<script type="text/javascript" src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datepicker/js/bootstrap-datepicker.min.js"></script>-->
<style>
    .errorBorder-color {
        padding: 0px !important;
        color: red;
        font-size: 19px;
        margin-left: 33px;
    }

    .btn-primary {
        color: #fff !important;
        background-color: #337ab7 !important;
        border-color: #2e6da4 !important;
    }

    .btn {
        display: inline-block;
        padding: 6px 12px !important;
        margin-bottom: 0 !important;
        font-size: 14px !important;
        font-weight: 400;
        line-height: 1.42857143;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        -ms-touch-action: manipulation;
        touch-action: manipulation;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        background-image: none;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .requiredfieldsstyle {
        padding-left: 15px !important;
        font-size: 12px;
        font-style: italic;
    }
</style>


<div class="modal fade" id="myProgramInhirit" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document" style="width: 920px !important;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    Program Activities
                </h4>
            </div>

            <div class="modal-body" style="height: auto !important;">
                <div class="col-md-12 margin-top-10">
                    <label>
                        Program Name
                    </label>
                    <div id="divProgramBind"></div>
                </div>

                <div class=" col-md-12 margin-top-15">
                    <table class=" table table-bordered">
                        <thead>
                            <tr>
                                <th><input type="checkbox" class="allCheckbox" /> Select All</th>
                                <th>Activity Name</th>
                                <th>Duration</th>
                            </tr>
                        </thead>
                        <tbody id="tbodyActivitiesInhirit"></tbody>
                    </table>
                </div>
            </div>
            <div class=" col-md-12 padding-0 margin-top-15">
                <div id="divErrorMessage" class="requiredfieldsstyle">
                </div>
            </div>
            <div class="clear">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">
                    Close
                </button>
                <input type="button" class="btn btn-primary" id="btnProgramInhiret"
                       value="Program Inherit" />
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="myModalActivityUpdate" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document" style="width: 920px !important;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="H4_1">
                    Activity
                </h4>
            </div>
            <div class="modal-body" style="height: auto !important;">
                <div class="col-md-12 margin-top-10" style="display: none">
                    <label>
                        Program Name
                    </label>
                    <input type="text" class="form-control popRequired" id="txtPopUpProgramName" readonly="readonly" />
                </div>
                <div class="col-md-12 padding-0 margin-top-10">
                    <div class="col-md-9">
                        <label>
                            Activity Name
                        </label>
                        <input type="text" class="form-control popRequired clearTextboxData" id="txtPopUpActivityName" />
                    </div>
                    <div class="col-md-3">
                        <label>
                            Sequence
                        </label>
                        <input type="text" class="form-control popRequired clearTextboxData" id="txtPopUpActivitySequence" />
                    </div>
                </div>
                <div class="col-md-12 padding-0 margin-top-15">
                    <div class="col-md-3">
                        <label>
                            Start Date
                        </label>
                        <fieldset>
                            <div class="control-group">
                                <div class="controls">
                                    <div class="col-md-12 padding-0 xdisplay_inputx form-group has-feedback">
                                        <input type="text" class="form-control has-feedback-left popRequired clearTextboxData"
                                               id="actPopUpStartDate" placeholder="MM-DD-YYYY" aria-describedby="inputSuccess2Status4">
                                        <span class="fa fa-calendar form-control-feedback left" aria-hidden="true"></span>
                                        <span id="inputSuccess2Status4" class="sr-only">(success)</span>
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                    <div class="col-md-3">
                        <label>
                            Start Time
                        </label>
                        <div class="input-group bootstrap-timepicker timepicker">
                            <input id="actPopUpStartTime" type="text" class="form-control input-small popRequired">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-time"></i></span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label>
                            End Date
                        </label>
                        <fieldset>
                            <div class="control-group">
                                <div class="controls">
                                    <div class="col-md-12 padding-0 xdisplay_inputx form-group has-feedback">
                                        <input type="text" class="form-control has-feedback-left popRequired clearTextboxData"
                                               id="actPopUpEndDate" placeholder="MM-DD-YYYY" aria-describedby="inputSuccess2Status4">
                                        <span class="fa fa-calendar form-control-feedback left" aria-hidden="true"></span>
                                        <span id="Span1" class="sr-only">(success)</span>
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                    <div class="col-md-3">
                        <label>
                            End Time
                        </label>
                        <div class="input-group bootstrap-timepicker timepicker">
                            <input id="actPopUpEndTime" type="text" class="form-control input-small popRequired">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-time "></i></span>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 padding-0 margin-top-15">
                    <div class="col-md-3">
                        <label>
                            Duration
                        </label>
                        <input type="text" class="form-control clearTextboxData" id="txtPopUpActivityDuration"
                               readonly="readonly" />
                    </div>
                    <div class="col-md-3" style="display:none">
                        <label>
                            UOM
                        </label>
                        <input type="text" class="form-control clearTextboxData" id="txtPopUpActivityUOM"
                               readonly="readonly" />
                    </div>
                    <div class="col-md-3">
                        <label>
                            Status
                        </label>
                        <select class="form-control" id="ddlPopUpActivityStatus">
                            <option value="Active">Active</option>
                            <option value="In Active">In Active</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-12 padding-0 margin-top-15">
                    <div class="col-md-3">
                        <label class="opacity-0">
                            0
                        </label>
                        <div class="col-md-12 padding-0">
                            <label class="checkbox-inline">
                                <input type="checkbox" name="AlertsReminders" id="chkPopUpFeedBackNeeded">
                                Need Feedback
                            </label>
                        </div>
                    </div>
                    <div class="col-md-6" id="divPopUpIsbajajEmp" style="display: none;">
                        <label>
                            Is the faculty/Speaker Bajaj Employee ?
                        </label>
                        <div class="col-md-12 padding-0">
                            <div class="col-md-12 padding-0" id="divPopEmpcheck">
                                <label class="radio-inline">
                                    <input type="radio" class="radioChecked uncheckRadio" name="PopUpisBajajEmpName"
                                           id="PopUpisBajajEmpYes" value="Yes">
                                    Yes
                                </label>
                                <label class="radio-inline">
                                    <input type="radio" class="radioChecked uncheckRadio" name="PopUpisBajajEmpName"
                                           id="PopUpisBajajEmpNo" value="No">
                                    No
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 padding-0 margin-top-15" id="divPopUpBajajEmployee" style="display: none">
                    <div class="col-md-3">
                        <label>
                            Speaker Email
                        </label>
                        <input type="text" class="form-control clearTextboxData PopvalidBajaemp" placeholder="Enter Email id"
                               id="txtPopUpSpeakerEmail" />
                    </div>
                    <div class="col-md-3">
                        <label>
                            Employee Name
                        </label>
                        <input type="text" class="form-control clearTextboxData PopvalidBajaemp" placeholder="Employee Name"
                               id="txtPopUpSpeakerEmpName" readonly="readOnly" />
                    </div>
                    <div class="col-md-3">
                        <label>
                            Employee Code
                        </label>
                        <input type="text" class="form-control clearTextboxData PopvalidBajaemp" placeholder="Employee Code"
                               id="txtPopUpSpeakerECode" readonly="readOnly" />
                    </div>
                    <div class="col-md-3">
                        <label>
                            Base Department
                        </label>
                        <input type="text" class="form-control clearTextboxData PopvalidBajaemp" placeholder="Department"
                               id="txtPopUpSpeakerDepartment" readonly="readOnly">
                    </div>
                </div>
                <div class="col-md-12 padding-0 margin-top-15" id="actPopUpSpeakerDescription" style="display: none">
                    <label>
                        Brief Description
                    </label>
                    <textarea class="form-control clearTextboxData reqemp" placeholder="Brief Description" id="txtPopUpSpeakerDesc"></textarea>
                </div>
            </div>
            <div class="col-md-12 padding-0" style="display:none;">
                <div class="col-md-6">
                    <label class="opacity-0">
                        0
                    </label>
                    <div class="col-md-12">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="EmailRequired" id="PopUpchkEmailRequired">
                            Need Email Template
                        </label>
                    </div>
                </div>
                <div class="col-md-6 margin-top-15" id="divPopUpEmailRequried" style="display: none">
                    <div id="divPopUpEmailTemplateBind">
                    </div>
                </div>
            </div>
            <div class="col-md-12 padding-0" style="display:none">
                <div class="col-md-6">
                    <label class="opacity-0">
                        0
                    </label>
                    <div class="col-md-12">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="RemainderFrequncy" id="PopUpchkRemainderFrequncy">
                            Remainder Frequency
                        </label>
                    </div>
                </div>
                <div class="col-md-6 margin-top-15" id="divPopUpRemainderFrquency" style="display: none">
                    <select class="form-control" id="ddlPopUpReaminderFrquency">
                        <option value="0">--Select--</option>
                        <option value="Daily">Daily</option>
                        <option value="Weekly">Weekly</option>

                    </select>
                </div>
            </div>
            <div class=" col-md-12 padding-0 margin-top-15">
                <div id="divpopMessage" class="requiredfieldsstyle">
                </div>
            </div>
            <div class="clear">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">
                    Close
                </button>
                <input type="button" class="btn btn-primary btnValidations" id="btnActivityUpdate"
                       value="Update" />
            </div>
        </div>
    </div>
</div>








<div class="modal fade" id="myModalP" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document" style="width: 920px !important;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="H4_2">
                    Activity
                </h4>
            </div>
            <div class="modal-body" style="height: auto !important;">
                <div class="col-md-12 margin-top-10">
                    <label>
                        Program Name
                    </label>
                    <input type="text" class="form-control Required" id="txtProgramName" readonly="readonly" />
                </div>
                <div class="col-md-12 padding-0 margin-top-10">
                    <div class="col-md-9">
                        <label>
                            Activity Name
                        </label>
                        <input type="text" class="form-control Required clearTextboxData" id="txtActivityName" />
                    </div>
                    <div class="col-md-3">
                        <label>
                            Sequence
                        </label>
                        <input type="text" class="form-control Required clearTextboxData" id="txtActivitySequence" />
                    </div>
                </div>
                <div class="col-md-12 padding-0 margin-top-15">
                    <div class="col-md-3">
                        <label>
                            Start Date
                        </label>
                        <fieldset>
                            <div class="control-group">
                                <div class="controls">
                                    <div class="col-md-12 padding-0 xdisplay_inputx form-group has-feedback">
                                        <input type="text" class="form-control has-feedback-left Required clearTextboxData"
                                               id="actStartDate" placeholder="MM-DD-YYYY" aria-describedby="inputSuccess2Status4">
                                        <span class="fa fa-calendar form-control-feedback left" aria-hidden="true"></span>
                                        <span id="Span2" class="sr-only">(success)</span>
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                    <div class="col-md-3">
                        <label>
                            Start Time
                        </label>
                        <div class="input-group bootstrap-timepicker timepicker">
                            <input id="actStartTime" type="text" class="form-control input-small Required">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-time"></i></span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label>
                            End Date
                        </label>
                        <fieldset>
                            <div class="control-group">
                                <div class="controls">
                                    <div class="col-md-12 padding-0 xdisplay_inputx form-group has-feedback">
                                        <input type="text" class="form-control has-feedback-left Required clearTextboxData"
                                               id="actEndDate" placeholder="MM-DD-YYYY" aria-describedby="inputSuccess2Status4">
                                        <span class="fa fa-calendar form-control-feedback left" aria-hidden="true"></span>
                                        <span id="Span3" class="sr-only">(success)</span>
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                    <div class="col-md-3">
                        <label>
                            End Time
                        </label>
                        <div class="input-group bootstrap-timepicker timepicker">
                            <input id="actEndTime" type="text" class="form-control input-small Required">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-time "></i></span>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 padding-0 margin-top-15">
                    <div class="col-md-3">
                        <label>
                            Duration
                        </label>
                        <input type="text" class="form-control clearTextboxData" id="txtActivityDuration"
                               readonly="readonly" />
                    </div>
                    <div class="col-md-3" style="display:none">
                        <label>
                            UOM
                        </label>
                        <input type="text" class="form-control clearTextboxData" id="txtActivityUOM" readonly="readonly" style="display:none" />
                    </div>
                    <div class="col-md-3">
                        <label>
                            Status
                        </label>
                        <select class="form-control" id="ddlActivityStatus">
                            <option value="Active">Active</option>
                            <option value="In Active">In Active</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-12 padding-0 margin-top-15">
                    <div class="col-md-3">
                        <label class="opacity-0">
                            0
                        </label>
                        <div class="col-md-12 padding-0">
                            <label class="checkbox-inline">
                                <input type="checkbox" name="AlertsReminders" id="chkFeedBackNeeded">
                                Need Feedback
                            </label>
                        </div>
                    </div>
                    <div class="col-md-6" id="divIsbajajEmp" style="display: none;">
                        <label>
                            Is the faculty/Speaker Bajaj Employee ?
                        </label>
                        <div class="col-md-12 padding-0">
                            <div class="col-md-12 padding-0" id="divEmpcheck">
                                <label class="radio-inline">
                                    <input type="radio" class="radioChecked uncheckRadio" name="isBajajEmpName" id="isBajajEmpYes"
                                           value="Yes">
                                    Yes
                                </label>
                                <label class="radio-inline">
                                    <input type="radio" class="radioChecked uncheckRadio" name="isBajajEmpName" id="isBajajEmpNo"
                                           value="No">
                                    No
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 padding-0 margin-top-15" id="divBajajEmployee" style="display: none">
                    <div class="col-md-3">
                        <label>
                            Speaker Email
                        </label>
                        <input type="text" class="form-control clearTextboxData validBajaemp" placeholder="Enter Email id"
                               id="txtSpeakerEmail" />
                    </div>
                    <div class="col-md-3">
                        <label>
                            Employee Name
                        </label>
                        <input type="text" class="form-control clearTextboxData validBajaemp" placeholder="Employee Name"
                               id="txtSpeakerEmpName" readonly="readOnly" />
                    </div>
                    <div class="col-md-3">
                        <label>
                            Employee Code
                        </label>
                        <input type="text" class="form-control clearTextboxData validBajaemp" placeholder="Employee Code"
                               id="txtSpeakerECode" readonly="readOnly" />
                    </div>
                    <div class="col-md-3">
                        <label>
                            Base Department
                        </label>
                        <input type="text" class="form-control clearTextboxData validBajaemp" placeholder="Department"
                               id="txtSpeakerDepartment" readonly="readOnly">
                    </div>
                </div>
                <div class="col-md-12 margin-top-15" id="actSpeakerDescription" style="display: none">
                    <label>
                        Brief Description
                    </label>
                    <textarea class="form-control clearTextboxData" placeholder="Brief Description" id="txtSpeakerDesc"></textarea>
                </div>
            </div>
            <div class="col-md-12" style="display:none;">
                <div class="col-md-6 padding-0">
                    <label class="opacity-0">
                        0
                    </label>
                    <div class="col-md-12">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="EmailRequired" id="chkEmailRequired">
                            Need Email Template
                        </label>
                    </div>
                </div>
                <div class="col-md-6  margin-top-15" id="divEmailRequried" style="display: none">
                    <div id="divEmailTemplateBind">
                    </div>
                </div>
            </div>
            <div class="col-md-12" style=" padding-bottom: 15px; display: none">
                <div class="col-md-6 padding-0">
                    <label class="opacity-0">
                        0
                    </label>
                    <div class="col-md-12">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="RemainderFrequncy" id="chkRemainderFrequncy">
                            Remainder Frequency
                        </label>
                    </div>

                </div>
                <div class="col-md-6  margin-top-15" id="divRemainderFrquency" style="display: none">
                    <select class="form-control" id="ddlReaminderFrquency">
                        <option value="0">--Select--</option>
                        <option value="Daily">Daily</option>
                        <option value="Weekly">Weekly</option>

                    </select>
                </div>
            </div>
            <div class=" col-md-12 padding-0 margin-top-15">
                <div id="divActiviCreationErrors" class="requiredfieldsstyle">
                </div>
            </div>
            <div class="clear">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">
                    Close
                </button>
                <input type="button" class="btn btn-primary btnValidations" id="btnActivityCreation"
                       value="Save" />
            </div>
        </div>
    </div>
</div>
<!--POPUP END ********************-->
<!--Program Name model dialoguebox Start-->
<div class="col-md-12 margin-top-10 padding-0">
    <div class="col-md-12 padding-0 page-content-header-style-1">
        <h1>
            Program Creation
        </h1>
    </div>
    <div class="col-md-12 padding-0 margin-top-10">
        <div class="col-md-8">
            <label>
                Program Name
            </label>
            <input type="text" class="form-control" id="txtProgramNameTextid" placeholder="Program Name" />
        </div>
        <div class="col-md-4">
            <label>
                Location
            </label>
            <input type="text" class="form-control" id="txtProgramLocationText" placeholder="Location" />
        </div>
    </div>
    <div class="col-md-12 margin-top-10">
        <label>
            Program Description
        </label>
        <input type="text" class="form-control" id="txtProgramDesc" placeholder="Program Description" />
    </div>
    <div class="col-md-12 margin-top-10" style="display:none">
        <label>
            Program Venue details
        </label>
        <textarea class="form-control" id="txtProgramVenue" placeholder="Program Venue details"></textarea>
    </div>
    <div class="col-md-12 padding-0 margin-top-15">
        <div class="col-md-4">
            <label>
                Status
            </label>
            <select class="form-control" id="ddlProgramStatus">
                <option>Active</option>
                <option>InActive</option>
            </select>
        </div>
        <div class="col-md-4">
            <label>
                Start Date
            </label>
            <fieldset>
                <div class="control-group">
                    <div class="controls">
                        <div class="col-md-12 padding-0 xdisplay_inputx form-group has-feedback">
                            <input type="text" class="form-control has-feedback-left clsProgramDate" id="txtProgramStartDate"
                                   placeholder="MM/DD/YYYY" aria-describedby="inputSuccess2Status4">
                            <span class="fa fa-calendar form-control-feedback left" aria-hidden="true"></span>
                            <span id="Span4" class="sr-only">(success)</span>
                        </div>
                    </div>
                </div>
            </fieldset>
        </div>
        <div class="col-md-4">
            <label>
                End Date
            </label>
            <fieldset>
                <div class="control-group">
                    <div class="controls">
                        <div class="col-md-12 padding-0 xdisplay_inputx form-group has-feedback">
                            <input type="text" class="form-control has-feedback-left clsProgramDate" id="txtProgramEndDate"
                                   placeholder="MM/DD/YYYY" aria-describedby="inputSuccess2Status4">
                            <span class="fa fa-calendar form-control-feedback left" aria-hidden="true"></span>
                            <span id="Span5" class="sr-only">(success)</span>
                        </div>
                    </div>
                </div>
            </fieldset>
        </div>
    </div>
    <div class="col-md-12 padding-0">
        <div class="col-md-4">
            <label>
                Reminder Frequency
            </label>
            <select class="form-control" id="ddlProgramRemainderFrquency">
                <option value="--Select--">--Select--</option>
                <option value="1">Daily</option>
                <option value="7">Weekly</option>
                <
            </select>
        </div>
    </div>
    <div class=" col-md-12 padding-0 margin-top-10">
        <div id="divProgramErrors" class="requiredfieldsstyle">
        </div>
        <div class="clear">
        </div>
    </div>
    <div class="clear">
    </div>
    <div class="col-md-12 margin-top-10">
        <button type="button" class="btn btn-default" id="bntPgrCancel">
            Cancel
        </button>
        <input type="button" class="btn btn-primary" id="btnProgrmCreate" value="Submit" />
    </div>
</div>
<div>
    <div class="col-md-12">
        <div class="col-md-12 padding-0" id="divActivityProgram" style="display: none;">
            <div>
                <div class="col-md-5 padding-0">
                    <label>
                        Add Activities/ Inherit Activities
                    </label>
                    <div class="col-md-12 padding-0">
                        <label class="radio-inline">
                            <input type="radio" class="radioChecked uncheckRadio" name="IsADDOrProgramInherit" id="rbtnAddActivities"
                                   value="Add Activities">
                            Add Activities
                        </label>
                        <label class="radio-inline">
                            <input type="radio" class="radioChecked uncheckRadio" name="IsADDOrProgramInherit" id="rbtnProgramInherit"
                                   value="ProgramInherit">
                            Program Inherit
                        </label>
                    </div>
                </div>
            </div>
            <div class="col-md-5 col-md-offset-7">
                <div class="col-md-6">
                    <input type="button" id="btnInhiritActivity" class="btn btn-block btn-primary" value="Inherit Activities" style="display:none">
                </div>
                <div class="col-md-6">
                    <input type="button" id="btnAddActivity" class="btn btn-block btn-primary" value="Add Activities" style="display:none">
                </div>
            </div>

        </div>
        <div class="col-md-12 padding-0 margin-top-15" style="display: none;">
            <div id="div1" class="errorBorder-color">
            </div>
        </div>
        <div class="col-md-12 padding-0 margin-top-15">
            <div class="col-md-12 padding-0">
                <label>
                    Activity Details
                </label>
            </div>
            <div class="col-md-12 padding-0">
                <table id="tableActivity" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>
                                Sequence No
                            </th>
                            <th>
                                Activity Name
                            </th>
                            <th>
                                Duration
                            </th>
                            <th>
                                From Date
                            </th>
                            <th>
                                Start Time
                            </th>
                            <th>
                                To Date
                            </th>
                            <th>
                                End Time
                            </th>
                            <th width="20%" colspan="2">
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody id="tblConfigParametersBind"></tbody>
                </table>
            </div>
        </div>
    </div>
    <div class=" col-md-12 padding-0 margin-top-10">
        <div id="divProgramActivityErrors" class="requiredfieldsstyle"></div>
        <div class="clear">
        </div>
    </div>
    <div id="divProgramAssign" style="display: none">
        <div class="col-md-4 col-md-offset-8">
            <div class="col-md-6">
                <input type="button" class="btn btn-primary" id="btnSaveAsDraft" value="Save As Draft" />
            </div>
            <div class="col-md-6">
                <input type="button" id="btnCreateProgram" class="btn btn-primary" value="Create Program" />
            </div>
        </div>
    </div>
</div>
<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js"></script>
<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/js/jquery.dataTables.min.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/js/dataTables.bootstrap.min.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/js/dataTables.responsive.min.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/js/responsive.bootstrap.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/js/datatables.scroller.min.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datepicker/js/moment.min.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datepicker/js/daterangepicker.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-timepicker/0.5.2/js/bootstrap-timepicker.js"></script>
<!-- bootstrap-daterangepicker -->
<script>
    $(document).ready(function () {
        $('#txtProgramStartDate').daterangepicker({
            singleDatePicker: true,
            minDate: moment(),
            locale: {
                format: 'DD/MM/YYYY'
            },
            calender_style: "picker_3"
        }, function (start, end, label) {
            $('#txtProgramStartDate').css('border-color', '');
            $('#divProgramErrors').css('color', '');
            $('#divProgramErrors').empty();
        });
        $('#txtProgramEndDate').daterangepicker({
            singleDatePicker: true,
            minDate: moment(),
            locale: {
                format: 'DD/MM/YYYY'
            },
            calender_style: "picker_3"
        }, function (start, end, label) {
            $('#txtProgramStartDate').css('border-color', '');
            $('#divProgramErrors').css('color', '');
            $('#divProgramErrors').empty();
        });
        $('#actStartDate').daterangepicker({
            singleDatePicker: true,
            minDate: moment(),
            locale: {
                format: 'DD/MM/YYYY'
            },
            calender_style: "picker_3"
        }, function (start, end, label) {
            console.log(start.toISOString(), end.toISOString(), label);
            CheckProgramActivityDateValidation();
        });

        $('#actEndDate').daterangepicker({
            singleDatePicker: true,
            minDate: moment(),
            locale: {
                format: 'DD/MM/YYYY'
            },
            calender_style: "picker_3"
        }, function (start, end, label) {
            console.log(start.toISOString(), end.toISOString(), label);
            CheckProgramActivityDateValidation();
        });
        $('#actPopUpStartDate').daterangepicker({
            singleDatePicker: true,
            minDate: moment(),
            locale: {
                format: 'DD/MM/YYYY'
            },
            calender_style: "picker_3"
        }, function (start, end, label) {
            console.log(start.toISOString(), end.toISOString(), label);
            CheckProgramPopUpActivityDateValidation();
        });

        $('#actPopUpEndDate').daterangepicker({
            singleDatePicker: true,
            minDate: moment(),
            locale: {
                format: 'DD/MM/YYYY'
            },
            calender_style: "picker_3"
        }, function (start, end, label) {
            console.log(start.toISOString(), end.toISOString(), label);
            CheckProgramPopUpActivityDateValidation();
        });
    });
    function CheckProgramDateValidation() {
        var strProgramStartDate = $("#txtProgramStartDate").val();
        var strProgramendDate = $("#txtProgramEndDate").val();
        if (strProgramStartDate != "" && strProgramendDate != "") {
            var Firstdate = new Date(strProgramStartDate);
            var lastdate = new Date(strProgramendDate);
            $('#txtProgramEndDate').css('border-color', '');
            if (lastdate <= Firstdate) {
                $("#txtProgramEndDate").val("");
                $('#txtProgramEndDate').css('border-color', 'red');
            }
        }
    }

    function CheckProgramActivityDateValidation() {
        $('#actStartDate').css('border-color', '');
        $('#actEndDate').css('border-color', '');
        $('#divActiviCreationErrors').css('color', '');
        $('#divActiviCreationErrors').empty();
        var StartDate = new Date($("#actStartDate").val());
        var EndDate = new Date($("#actEndDate").val());
        var pgrmStartdate = new Date(document.getElementById("txtProgramStartDate").value);
        var pgrmEndadte = new Date(document.getElementById("txtProgramEndDate").value);
        if (StartDate < pgrmStartdate || StartDate > pgrmEndadte) {
            $('#actStartDate').css('border-color', 'red');
            $('#divActiviCreationErrors').css('color', 'red');
            $('#divActiviCreationErrors').append("Activity Start Date Should Be Between Program Start Date And End Date");
            $('#actStartDate').val('');
        }
        else if (EndDate < pgrmStartdate || EndDate > pgrmEndadte) {
            $('#actEndDate').css('border-color', 'red');
            $('#divActiviCreationErrors').css('color', 'red');
            $('#divActiviCreationErrors').append("Activity End Date Should Be Between Program Start Date And End Date");
            $('#actEndDate').val('');
        } else if (EndDate < StartDate) {
            $('#actEndDate').css('border-color', 'red');
            $('#divActiviCreationErrors').css('color', 'red');
            $('#divActiviCreationErrors').append("Activity End Date Sholud Be Greater Than Start Date");
            $('#actEndDate').val('');
        }

    }


    function CheckProgramPopUpActivityDateValidation() {
        $('#actPopUpStartDate').css('border-color', '');
        $('#actPopUpEndDate').css('border-color', '');
        $('#divpopMessage').css('color', '');
        $('#divpopMessage').empty();
        var StartDate = new Date($("#actPopUpStartDate").val());
        var EndDate = new Date($("#actPopUpEndDate").val());
        var pgrmStartdate = new Date(document.getElementById("txtProgramStartDate").value);
        var pgrmEndadte = new Date(document.getElementById("txtProgramEndDate").value);
        if (StartDate < pgrmStartdate || StartDate > pgrmEndadte) {
            $('#actPopUpStartDate').css('border-color', 'red');
            $('#divpopMessage').css('color', 'red');
            $('#divpopMessage').append("Activity Start Date should be between Program start date and end date");
            $('#actPopUpStartDate').val('');
        }
        else if (EndDate < pgrmStartdate || EndDate > pgrmEndadte) {
            $('#actPopUpEndDate').css('border-color', 'red');
            $('#divpopMessage').css('color', 'red');
            $('#divpopMessage').append("Activity end Date should be between Program start date and end date");
            $('#actPopUpEndDate').val('');
        } else if (EndDate < StartDate) {
            $('#actPopUpEndDate').css('border-color', 'red');
            $('#divpopMessage').css('color', 'red');
            $('#divpopMessage').append("Activity End Date Sholud Be Greater Than Start Date");
            $('#actPopUpEndDate').val('');
        }

    }

    function GetProgramDetails(ProgramID) {
        jQuery.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('ProgramMaster')/items(" + ProgramID + ")",
            type: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
                "content-type": "application/json;odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            success: function (d) {
                if (d.d.Status == "InActive") {
                    document.getElementById("divActivityProgram").style.display = 'none';
                    document.getElementById("divProgramAssign").style.display = 'none';
                    $("#btnProgrmCreate").hide();
                    $("#bntPgrCancel").hide();
                }
                else {
                    $("#txtProgramNameTextid").val(d.d.Title);
                    $("#txtProgramStartDate").val(d.d.ProgramStartDate);
                    $("#txtProgramEndDate").val(d.d.ProgramEndDate);
                    $("#txtProgramLocationText").val(d.d.Location);
                    $("#txtProgramVenue").val(d.d.ProgramVenue);
                    $("#ddlProgramStatus").val(d.d.Status);
                    $("#txtProgramName").val(d.d.Title);
                    $("#txtProgramDesc").val(d.d.ProgramDesc);
                    $("ddlProgramRemainderFrquency").val(d.d.RemainderFrText);
                    PgrmStartDate = d.d.ProgramStartDate;
                    PgrmEndDate = d.d.ProgramEndDate;
                    document.getElementById("txtProgramNameTextid").readOnly = true;
                    document.getElementById("txtProgramStartDate").readOnly = true;
                    document.getElementById("txtProgramEndDate").readOnly = true;
                    document.getElementById("txtProgramLocationText").readOnly = true;
                    document.getElementById("txtProgramVenue").readOnly = true;
                    document.getElementById("ddlProgramStatus").disabled = true;
                    document.getElementById("ddlProgramRemainderFrquency").disabled = true;
                    document.getElementById("txtProgramDesc").disabled = true;
                    document.getElementById("divActivityProgram").style.display = 'block';
                    document.getElementById("divProgramAssign").style.display = 'block';
                    $("#btnProgrmCreate").hide();
                    $("#bntPgrCancel").hide();
                }

            },
            error: function () { console.log('fail'); }
        });

    }
</script>
<script>
    $('#actStartTime,#actEndTime').timepicker();
    $('#actPopUpStartTime,#actPopUpEndTime').timepicker();
</script>
<!--<script>

    jQuery.ajax({
        url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('ConfigParameters')/items",
        type: "GET",
        headers: {
            "accept": "application/json;odata=verbose",
            "content-type": "application/json;odata=verbose",
            "X-RequestDigest": $("#__REQUESTDIGEST").val()
        },
        success: function (d) {
            var arr = [];
            i = 0;
            $.each(d.d.results, function (index, results) {
                if (results.Status == "Active") {
                    arr[i++] = index;
                }
            });
            var Count = arr.length;
            $("#TotalCout").append("[ " + Count + " ]");
            $("#tblConfigParametersBind").empty();
            for (var j = 0; j < arr.length; j++) {
                var arrConfigK = arr[j];
                var index = parseInt(j + 1);

                var ActivityName = d.d.results[arrConfigK].ActivityName;
                var Duration = d.d.results[arrConfigK].Duration;
                var UOM = d.d.results[arrConfigK].UOM;
                var DurationInUOM = Duration + " " + UOM;
                var StartDate = d.d.results[arrConfigK].StartDate;
                var EndDate = d.d.results[arrConfigK].EndDate;
                var ActivityID = d.d.results[arrConfigK].ID;

                $("#tblConfigParametersBind").append("<tr><td>" + index + "</td><td>" + ActivityName + "</td><td>" + DurationInUOM + "</td><td id='actStartDate'>" + StartDate + "</td><td id='actEndDate'>" + EndDate + "</td><td width='10%'><input type='button' data-toggle='modal'  data-edit='popup-1'data-val='" + ActivityID + "' value='Edit' /></td><td width='10%'><input type='button'  data-delete='popup-1'data-val='" + ActivityID + "' value='Remove'> </td></tr>");

            }
        },
        error: function () { console.log('fail'); }
    });
</script>-->
<style>
    .error {
        border-width: 5px;
        border-style: solid;
        border-color: rgb(255,130,255);
    }
</style>
<script>
    $('#rbtnAddActivities').click(function () {
        $('#btnAddActivity').show();
        $('#btnInhiritActivity').hide();
    });
    $('#rbtnProgramInherit').click(function () {
        $('#btnAddActivity').hide();
        $('#btnInhiritActivity').show();
    });
</script>
<script>

    function PgrogramCreationInsert() {
        var appWebUrl = window.location.protocol + "//" + window.location.host + _spPageContextInfo.webServerRelativeUrl;
        var ProgramName = document.getElementById("txtProgramNameTextid").value.trim(/^\s+|\s+$/g, '');
        var Status = document.getElementById("ddlProgramStatus");
        var Statustxt = Status.options[Status.selectedIndex].text;
        var ProgramStartDate = document.getElementById("txtProgramStartDate").value;
        var ProgramEndDate = document.getElementById("txtProgramEndDate").value;
        var ProgramLocationText = document.getElementById("txtProgramLocationText").value;
        var ProgramLocationVenue = document.getElementById("txtProgramVenue").value;
        var PrgmRemainFr = $("#ddlProgramRemainderFrquency").val();
        var PrgmRemaintxt = $("#ddlProgramRemainderFrquency :selected").text();
        var ProgramDesc = document.getElementById("txtProgramDesc").value;
        var Creator = LoginUserEmail();

        $.ajax({
            url: appWebUrl + "//_api/web/lists/getbytitle('ProgramMaster')/items",
            type: "POST",
            data: JSON.stringify({
                '__metadata': { 'type': 'SP.Data.ProgramMasterListItem' },
                'Title': ProgramName,
                'Status': Statustxt,
                'ProgramStartDate': ProgramStartDate,
                'ProgramEndDate': ProgramEndDate,
                'Location': ProgramLocationText,
                'ProgramVenue': ProgramLocationVenue,
                'RemainderFrValue': PrgmRemainFr,
                'RemainderFrText': PrgmRemaintxt,
                'ProgramCreator': Creator,
                'ProgramDesc': ProgramDesc,
            }),
            headers: {
                "Accept": "application/json;odata=verbose",
                "content-type": "application/json; odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val(),
            },
            success: function (data) {
                alert("Program Created successfully.");
                var pgmId = data.d.ID;
                var ProgramID = pgmId.toString();
                GetProgramDetails(ProgramID);
            },
            error: function (err) {
                alert("Error while adding item: " + JSON.stringify(err));
            }
        });
    }
    $("#btnProgrmCreate").click(function () {
        if (validateProgram()) {
            PgrogramCreationInsert();
        }

    });
    function validateProgram() {
        var validate = true;
        $('#divProgramErrors').empty();
        $('#txtProgramLocationText').css('border-color', '');
        $('#txtProgramNameTextid').css('border-color', '');
        $('#txtProgramStartDate').css('border-color', '');
        $('#txtProgramEndDate').css('border-color', '');
        $('#txtProgramDesc').css('border-color', '');
        $('#ddlProgramRemainderFrquency').css('border-color', '');
        // CheckProgramDateValidation();
        if ($('#txtProgramNameTextid').val() == "") {
            $('#txtProgramNameTextid').css('border-color', 'red');
            validate = false;
            $('#divProgramErrors').css('color', 'red');
            $('#divProgramErrors').append("Highlighted Fields Are Mandatory");
        }
        else if ($('#txtProgramLocationText').val() == "") {
            $('#txtProgramLocationText').css('border-color', 'red');
            $('#divProgramErrors').css('color', 'red');
            $('#divProgramErrors').append("Please Enter Program Location");
            validate = false;
        } else if ($('#txtProgramDesc').val() == "") {
            $('#txtProgramDesc').css('border-color', 'red');
            $('#divProgramErrors').css('color', 'red');
            $('#divProgramErrors').append("Please Enter Program Description");
            validate = false;
        }
        else if ($('#txtProgramStartDate').val() == "MM/DD/YYYY" || $('#txtProgramStartDate').val() == "") {
            $('#txtProgramStartDate').css('border-color', 'red');
            $('#divProgramErrors').css('color', 'red');
            $('#divProgramErrors').append("Please Enter Program Start Date");
            validate = false;

        }
        else if ($('#txtProgramEndDate').val() == "MM/DD/YYYY" || $('#txtProgramEndDate').val() == "") {
            $('#txtProgramEndDate').css('border-color', 'red');
            $('#divProgramErrors').css('color', 'red');
            $('#divProgramErrors').append("Please Enter Program End Date");
            validate = false;
        }
        else if ($('#ddlProgramRemainderFrquency').val() == "--Select--") {
            $('#ddlProgramRemainderFrquency').css('border-color', 'red');
            $('#divProgramErrors').css('color', 'red');
            $('#divProgramErrors').append("Please Select Remaind Frequency");
            validate = false;
        }
        var txtProgramStartDate = document.getElementById("txtProgramStartDate").value;
        var txtProgramEndDate = document.getElementById("txtProgramEndDate").value;
        var date1 = new Date(txtProgramStartDate);
        var date2 = new Date(txtProgramEndDate);
        var timeDiff = date2.getTime() - date1.getTime();
        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
        if (date2 < date1) {
            $('#divProgramErrors').empty();
            $('#divProgramErrors').css('color', 'red');
            $('#txtProgramEndDate').val('');
            $('#txtProgramEndDate').css('border-color', 'red');
            $('#divProgramErrors').append("Program End Date Sholud Be Greater Than Program Start Date");
            validate = false;
        }
        return validate;
    }


    var isFeedBackValue = "";
    $('#chkFeedBackNeeded').click(function () {
        if ($(this).prop("checked") == true) {
            isFeedBackValue = "Yes";
            document.getElementById("divIsbajajEmp").style.display = "block";
        }
        else if (
                $(this).prop("checked") == false) {
            isFeedBackValue = "No";
            document.getElementById("divIsbajajEmp").style.display = "none";
            document.getElementById("divBajajEmployee").style.display = "none";
            document.getElementById("actSpeakerDescription").style.display = "none";
            $('input[name="isBajajEmpName"]').prop('checked', false);
        }
    });
    var isEmailRequired = "";
    $('#chkEmailRequired').click(function () {
        if ($(this).prop("checked") == true) {
            isEmailRequired = "Yes";
            document.getElementById("divEmailRequried").style.display = "block";
        }
        else if (
                $(this).prop("checked") == false) {
            isEmailRequired = "No";
            document.getElementById("divEmailRequried").style.display = "none";
        }
    });
    var isRemainderFrequncy = "";
    $('#chkRemainderFrequncy').click(function () {
        if ($(this).prop("checked") == true) {
            isRemainderFrequncy = "Yes";
            document.getElementById("divRemainderFrquency").style.display = "block";
        }
        else if (
                $(this).prop("checked") == false) {
            isRemainderFrequncy = "No";
            document.getElementById("divRemainderFrquency").style.display = "none";
        }
    });
    $('#isBajajEmpYes').click(function () {
        document.getElementById("divBajajEmployee").style.display = "block";
        document.getElementById("actSpeakerDescription").style.display = "block";
        $('#txtSpeakerEmail').attr('readonly', false);
        $('#txtSpeakerEmpName').attr('readonly', true);
        $('#txtSpeakerECode').attr('readonly', true);
        $('#txtSpeakerDepartment').attr('readonly', true);
    });
    $('#isBajajEmpNo').click(function () {
        document.getElementById("divBajajEmployee").style.display = "block";
        document.getElementById("actSpeakerDescription").style.display = "block";
        $('#txtSpeakerEmail').attr('readonly', false); $('#txtSpeakerEmail').val("");
        $('#txtSpeakerEmpName').attr('readonly', false); $('#txtSpeakerEmpName').val("");
        $('#txtSpeakerECode').attr('readonly', false); $('#txtSpeakerECode').val("");
        $('#txtSpeakerDepartment').attr('readonly', false); $('#txtSpeakerDepartment').val("");
    });

    $("#btnActivityCreation").click(function () {
        var ProgramName = document.getElementById("txtProgramNameTextid").value.trim(/^\s+|\s+$/g, '');;
        var isValidTime = true;
        function CheckActDateTime() {
            GetActivityTimeCal();
            if ($('#tableActivity tr').length > 1) {
                var getActivityDates = GetActivityDateDetails(ProgramName, 0);
                for (var i = 0; i < getActivityDates.length; i++) {
                    var CactStrtDate = getActivityDates[i].ActivityStartDate;
                    var CactStrtTime = getActivityDates[i].ActivityStartTime;
                    var CactEndDate = getActivityDates[i].ActivityEndDate;
                    var CactEndTime = getActivityDates[i].ActivityEndTime;
                    console.log(CactStrtDate);
                    console.log(CactEndDate);
                    // Act Existing Start Date with time

                    var actStime = CactStrtTime;
                    var actSHhours = Number(actStime.match(/^(\d+)/)[1]);
                    var actsMinutes = Number(actStime.match(/:(\d+)/)[1]);
                    var AMPM = actStime.match(/\s(.*)$/)[1].toLowerCase();
                    if (AMPM == "pm" && actSHhours < 12) actSHhours = actSHhours + 12;
                    if (AMPM == "am" && actSHhours == 12) actSHhours = actSHhours - 12;
                    var actsHours = actSHhours.toString();
                    var actSsMinutes = actsMinutes.toString();
                    if (actSHhours < 10) actsHours = "0" + actsHours;
                    if (actsMinutes < 10) actSsMinutes = "0" + actSsMinutes;

                    // End of Existing Start Date with time

                    // Act Existing End Date with time
                    var actEtime = CactEndTime;
                    var actEHhours = Number(actEtime.match(/^(\d+)/)[1]);
                    var eminutes = Number(actEtime.match(/:(\d+)/)[1]);
                    var AMPM = actEtime.match(/\s(.*)$/)[1].toLowerCase();
                    if (AMPM == "pm" && actEHhours < 12) actEHhours = actEHhours + 12;
                    if (AMPM == "am" && actEHhours == 12) actEHhours = actEHhours - 12;
                    var acteHours = actEHhours.toString();
                    var actEsMinutes = eminutes.toString();
                    if (actEHhours < 10) acteHours = "0" + acteHours;
                    if (eminutes < 10) actEsMinutes = "0" + actEsMinutes;
                    // End of  Existing End Date with time



                    var time = $('#actStartTime').val();
                    var hours = Number(time.match(/^(\d+)/)[1]);
                    var minutes = Number(time.match(/:(\d+)/)[1]);
                    var AMPM = time.match(/\s(.*)$/)[1].toLowerCase();
                    if (AMPM == "pm" && hours < 12) hours = hours + 12;
                    if (AMPM == "am" && hours == 12) hours = hours - 12;
                    var sHours = hours.toString();
                    var sMinutes = minutes.toString();
                    if (hours < 10) sHours = "0" + sHours;
                    if (minutes < 10) sMinutes = "0" + sMinutes;

                    var pgetime = $('#actEndTime').val();

                    var pghours = Number(pgetime.match(/^(\d+)/)[1]);
                    var pgminutes = Number(pgetime.match(/:(\d+)/)[1]);
                    var pgAMPM = pgetime.match(/\s(.*)$/)[1].toLowerCase();
                    if (pgAMPM == "pm" && pghours < 12) pghours = pghours + 12;
                    if (pgAMPM == "am" && pghours == 12) pghours = pghours - 12;
                    //var pgsHours = pghours.toString();
                    //var pgsMinutes = pgminutes.toString();
                    //if (pghours < 10) pgsHours = "0" + pgsHours;
                    //if (pgminutes < 10) pgsMinutes = "0" + pgsMinutes;
                    var pgesHours = pghours.toString();
                    var pgesMinutes = pgminutes.toString();
                    if (pgesMinutes < 10) pgesHours = pgesHours;
                    if (pgesMinutes < 10) pgesMinutes = pgesMinutes;

                    var actStartDate = new Date($('#actStartDate').val());// + ' ' + sHours + ':' + sMinutes);
                    var actEndDate = new Date($('#actEndDate').val());// + ' ' + pgesHours + ':' + pgesMinutes);
                    var actStartDateTime = new Date(CactStrtDate);// + ' ' + actsHours + ':' + actSsMinutes);
                    var actEndDateTime = new Date(CactEndDate);// + ' ' + actEHhours + ':' + actEsMinutes);

                    var actEnterSDate = actStartDate.setHours(sHours, sMinutes, 0, 0);
                    var actEnterEDate = actEndDate.setHours(pgesHours, pgesMinutes, 0, 0);
                    var actbackEndSDate = actStartDateTime.setHours(actsHours, actSsMinutes, 0, 0);
                    var actbackEndEDate = actEndDateTime.setHours(acteHours, actEsMinutes, 0, 0);

                    var a = new Date(actEnterSDate);
                    var b = new Date(actEnterEDate);
                    var c = new Date(actbackEndSDate);
                    var d = new Date(actbackEndEDate);

                    if ((a >= c && a <= d) || (b >= c && b <= d)) {
                        $('#divActiviCreationErrors').css('color', '');
                        $('#divActiviCreationErrors').empty();
                        $('#divActiviCreationErrors').css('color', 'red');
                        $('#divActiviCreationErrors').append("Activity Date Time Already Entered.");
                        isValidTime = false;
                    }
                    else if (actEnterSDate != actbackEndSDate && actEnterEDate != actbackEndEDate) {
                        isValidTime = true;
                    }
                }
            }
            return isValidTime;
        }
        if (ActivityDataValidations() && CheckActDateTime()) {
            InsertActivityDetials();
        }
    });
    $("#txtProgramName").val(document.getElementById("txtProgramNameTextid").value.trim(/^\s+|\s+$/g, ''))
    function ActivityDataValidations() {
        var isValid = true;
        $('#divActiviCreationErrors').empty();
        $('.Required').each(function () {
            if ($.trim($(this).val()) == '' || $.trim($(this).val()) == '0') {
                isValid = false;
                $(this).css({
                    "border": "1px solid red"
                });
            }
            else {
                $(this).css({
                    "border": ""
                });
            }
        });
        if (isFeedBackValue == "Yes") {
            if ($("#isBajajEmpYes").is(':checked') == false && $("#isBajajEmpNo").is(':checked') == false) {
                isValid = false;
                $('#divEmpcheck').css({
                    "border": "1px solid red"

                });
            }
            if ($("#isBajajEmpYes").is(':checked') == true) {
                $('.validBajaemp').each(function () {
                    if ($.trim($(this).val()) == '' || $.trim($(this).val()) == '0') {
                        isValid = false;
                        $(this).css({
                            "border": "1px solid red"
                        });

                    }
                    else {
                        $(this).css({
                            "border": ""
                        });
                    }
                });

            }
            if ($("#isBajajEmpNo").is(':checked') == true) {
                $('.validBajaemp').each(function () {
                    if ($.trim($(this).val()) == '' || $.trim($(this).val()) == '0') {
                        isValid = false;
                        $(this).css({
                            "border": "1px solid red"
                        });

                    }
                    else {
                        $(this).css({
                            "border": ""
                        });
                    }
                });
                $('.validBajaemp').each(function () {
                    if ($.trim($(this).val()) == '' || $.trim($(this).val()) == '0') {
                        isValid = false;
                        $(this).css({
                            "border": "1px solid red"
                        });

                    }
                    else {
                        $(this).css({
                            "border": ""
                        });
                    }
                });
            }
        }
        if (isEmailRequired == "Yes" && $('#ddlEmailTemplateDropDown').val() == "") {
            $('#ddlEmailTemplateDropDown').css('border-color', 'red');
            isValid = false;
        }
        if (isRemainderFrequncy == "Yes" && ($('#ddlReaminderFrquency').val() == "" || $('#ddlReaminderFrquency').val() == "0")) {
            $('#ddlReaminderFrquency').css('border-color', 'red');
            isValid = false;
        }
        if (isValid == false) {
            $('#divActiviCreationErrors').css('color', 'red');
            $('#divActiviCreationErrors').append("Highlighted Fields Are Mandatory");
        }
        else {
            $('#divActiviCreationErrors').css('color', '');
        }

        return isValid;
    }

    function InsertActivityDetials() {
        var ActivityName = document.getElementById("txtActivityName").value;
        var actStartDate = document.getElementById("actStartDate").value;
        var actStartTime = document.getElementById("actStartTime").value;
        var actEndDate = document.getElementById("actEndDate").value;
        var actEndTime = document.getElementById("actEndTime").value;
        var ActivityDuration = document.getElementById("txtActivityDuration").value;
        var ActivityUOM = document.getElementById("txtActivityUOM").value;
        var ActSequecnce = parseInt(document.getElementById("txtActivitySequence").value);
        var SpeakerEmail = document.getElementById("txtSpeakerEmail").value;
        var SpeakerEmpName = document.getElementById("txtSpeakerEmpName").value;
        var SpeakerECode = document.getElementById("txtSpeakerECode").value;
        var SpeakerDepartment = document.getElementById("txtSpeakerDepartment").value;
        var SpeakerDesc = document.getElementById("txtSpeakerDesc").value;

        var ddlEmailTemplate = document.getElementById("ddlEmailTemplateDropDown");
        var ddlEmainTemplateTitle = ddlEmailTemplate.options[ddlEmailTemplate.selectedIndex].value;
        var ddlEmainTemplateBody = ddlEmailTemplate.options[ddlEmailTemplate.selectedIndex].text;

        var ddlRemainderFr = document.getElementById("ddlReaminderFrquency");
        var ddlRemainderFrequency = ddlRemainderFr.options[ddlRemainderFr.selectedIndex].value;

        var isBajajEmpName = $('input[name=isBajajEmpName]:radio:checked').val();
        var ddlStatus = document.getElementById("ddlActivityStatus");

        var ddlStatusValue = ddlStatus.options[ddlStatus.selectedIndex].value;

        var ProgramName = document.getElementById("txtProgramName").value;
        var ProgramStartDate = document.getElementById("txtProgramStartDate").value;
        var ProgramEndDate = document.getElementById("txtProgramEndDate").value;
        var ProgramLocation = document.getElementById("txtProgramLocationText").value;
        var ProgramVenue = document.getElementById("txtProgramVenue").value;
        var ProgramStatus = document.getElementById("ddlProgramStatus").value;
        var Feed = $('#chkFeedBackNeeded').prop('checked');
        if (Feed == true) {
            isFeedBackValue = "Yes"
        }
        else {
            isFeedBackValue = "No"
        }
        $.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('ConfigParameters')/items",
            type: "POST",
            async: false,
            data: JSON.stringify({
                '__metadata': { 'type': 'SP.Data.ConfigParametersListItem' },
                'Title': ActivityName,
                'ActivityName': ActivityName,
                'Duration': ActivityDuration,
                'Sequence': ActSequecnce,
                'AlertsReminders': isFeedBackValue,
                'Status': ddlStatusValue,
                'UOM': ActivityUOM,
                'StartDate': actStartDate,
                'EndDate': actEndDate,
                'ActivityStartTime': actStartTime,
                'ActivityEndTime': actEndTime,
                'FeedBackRequired': isFeedBackValue,
                'NeedEmailTemplate': isEmailRequired,

                'EmailTemplateName': ddlEmainTemplateTitle,
                'EmailTemplateBody': ddlEmainTemplateBody,

                'Remainder': isRemainderFrequncy,
                'RemainderFrequency': ddlRemainderFrequency,

                'ProgramName': ProgramName,
                'ProgramStartDate': ProgramStartDate,
                'ProgramEndDate': ProgramEndDate,
                'ProgramLocation': ProgramLocation,
                'ProgramVenue': ProgramVenue,
                'ProgramStatus': ProgramStatus
            }),
            headers: {
                "Accept": "application/json;odata=verbose",
                "content-type": "application/json; odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val(),
            },
            success: function (data) {
                if (isFeedBackValue == "Yes") {
                    var ActiviTyID = data.d.ID;
                    var ACTID = ActiviTyID.toString();
                    FeedDetailsInsert(SpeakerEmail, SpeakerEmpName, SpeakerECode, SpeakerDepartment, SpeakerDesc, ACTID, ActSequecnce, isBajajEmpName);
                    GetActivityData();
                }
                else {
                    GetActivityData();
                    alert("Activity Created Successfully.");
                    $('#myModalP').modal('hide');
                }
            },
            error: function (err) {
                alert("Error while adding item: " + JSON.stringify(err));
            }
        });

        function FeedDetailsInsert(SpeakerEmail, SpeakerEmpName, SpeakerECode, SpeakerDepartment, SpeakerDesc, ACTID, ActSequecnce, isBajajEmpName) {
            $.ajax({
                url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getbytitle('FeedBackDetails')/items",
                type: "POST",
                async: false,
                data: JSON.stringify({
                    '__metadata': { 'type': 'SP.Data.FeedBackDetailsListItem' },
                    'Title': SpeakerEmpName,
                    'SpeakerDepartment': SpeakerDepartment,
                    'NameOfTheSpeaker': SpeakerEmpName,
                    'EmployeeCode': SpeakerECode,
                    'SpeakerDesc': SpeakerDesc,
                    'ActiviTyID': ACTID,
                    'SpeakerEmail': SpeakerEmail,
                    'Sequence': ActSequecnce,
                    'IsBajajEmployee': isBajajEmpName,
                    'Status': "Active",
                }),
                headers: {
                    "Accept": "application/json;odata=verbose",
                    "content-type": "application/json; odata=verbose",
                    "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                },
                success: function (data) {
                    alert("Activity Created Successfully.");
                    GetActivityData();
                    $('#myModalP').modal('hide');

                },
                error: function (err) {
                    alert("Error while adding item: " + JSON.stringify(err));
                }
            });
        }

    }
</script>
<script>

    $(document).ready(function () {
        $('#txtActivitySequence').keypress(validateNumber);
        $('#txtPopUpActivitySequence').keypress(validateNumber);
    });

    function validateNumber(event) {
        var key = window.event ? event.keyCode : event.which;
        if (event.keyCode === 8 || event.keyCode === 46) {
            return true;
        } else if (key < 48 || key > 57) {
            return false;
        } else {
            return true;
        }
    };
</script>
<script>
    $("#actEndTime").change(function () {
        GetActivityTimeCal();
    });
</script>
<script>
    $("#txtSpeakerEmail").change(function () {
        $('#divActiviCreationErrors').empty();
        $('#txtSpeakerEmail').css('color', '');
        var SpeakerEmail = document.getElementById("txtSpeakerEmail").value;
        var isBajajEmpName = $('input[name=isBajajEmpName]:radio:checked').val();
        if (isBajajEmpName == "Yes") {
            $.ajax({
                url: _spPageContextInfo.webAbsoluteUrl + "/_api/SP.UserProfiles.PeopleManager/GetPropertiesFor(accountName=@v)?@v=%27i:0%23.f|membership|" + SpeakerEmail + "%27",
                type: "GET",
                async: false,
                headers: {
                    "accept": "application/json;odata=verbose",
                    "content-type": "application/json;odata=verbose",
                    "X-RequestDigest": $("#__REQUESTDIGEST").val()
                },
                success: function (d) {
                    if (d.d.DisplayName == 'undefined' || d.d.DisplayName == null || d.d.DisplayName == '') {
                        $('#divActiviCreationErrors').css('color', 'red');
                        $('#txtSpeakerEmail').css('border-color', 'red');
                        $('#divActiviCreationErrors').append("Please Enter Valid Bajaj Employee Email");
                    }
                    else {
                        var DeptName = d.d.UserProfileProperties.results[11].Value;
                        var EmpCode = d.d.UserProfileProperties.results[19].Value;
                        var EmpName = d.d.DisplayName;

                        var UserWithoutDomain = EmpCode.substring(0, EmpCode.lastIndexOf("@"));
                        var EcodeUpper = UserWithoutDomain.toUpperCase();

                        $("#txtSpeakerEmpName").val(EmpName);
                        $("#txtSpeakerECode").val(EcodeUpper);
                        $("#txtSpeakerDepartment").val(DeptName);
                        $('#divActiviCreationErrors').css('color', '');
                        $('#txtSpeakerEmail').css('border-color', '');
                        $('#divActiviCreationErrors').empty();
                    }
                },
                error: function () { console.log('fail'); }
            });
        }
    });

</script>
<script type="text/javascript">

    $(document).ready(function () {
        EmailTemplateBind();
    });
    function EmailTemplateBind() {
        var listName = "FeedBackEmailTemplates";
        var url = _spPageContextInfo.webAbsoluteUrl;

        getEmailTemplateDetails(listName, url, function (data) {
            var items = data.d.results;
            var inputElement = '<select id="ddlEmailTemplateDropDown" class="form-control"><option  value="">Select</option>';
            for (var i = 0; i < items.length; i++) {
                var itemId = items[i].EmailBody,
                     itemVal = items[i].Title;
                inputElement += '<option value="' + itemVal + '"selected>' + itemVal + '</option>';

            }
            inputElement += '</select>';
            $('#divEmailTemplateBind').append(inputElement);

            $("#ddlEmailTemplateDropDown").each(function () {
                $('option', this).each(function () {

                    if ($(this).text() == 'Select') {
                        $(this).attr('selected', 'selected')
                    };
                });
            });

        }, function (data) {
            alert("Ooops, an error occured. Please try again");
        });
    }
    function getEmailTemplateDetails(listName, siteurl, success, failure) {
        $.ajax({
            url: siteurl + "/_api/web/lists/getbytitle('FeedBackEmailTemplates')/items?$orderby=Title%20asc",
            method: "GET",
            async: false,
            headers: { "Accept": "application/json; odata=verbose" },
            success: function (data) {
                success(data);
            },
            error: function (data) {
                failure(data);
            }
        });
    }


</script>
<script type="text/javascript">

    $(document).ready(function () {
        EmailTemplatePopUpBind();
    });
    function EmailTemplatePopUpBind() {
        var listName = "FeedBackEmailTemplates";
        var url = _spPageContextInfo.webAbsoluteUrl;

        getEmailTemplateDetails(listName, url, function (data) {
            var items = data.d.results;
            var inputElement = '<select id="ddlPopUpEmailTemplateDropDown" class="form-control"><option  value="">Select</option>';
            for (var i = 0; i < items.length; i++) {
                var itemId = items[i].EmailBody,
                     itemVal = items[i].Title;
                inputElement += '<option value="' + itemVal + '"selected>' + itemVal + '</option>';

            }
            inputElement += '</select>';
            $('#divPopUpEmailTemplateBind').append(inputElement);

            $("#ddlPopUpEmailTemplateDropDown").each(function () {
                $('option', this).each(function () {

                    if ($(this).text() == 'Select') {
                        $(this).attr('selected', 'selected')
                    };
                });
            });

        }, function (data) {
            alert("Ooops, an error occured. Please try again");
        });
    }
    function getEmailTemplateDetails(listName, siteurl, success, failure) {
        $.ajax({
            url: siteurl + "/_api/web/lists/getbytitle('FeedBackEmailTemplates')/items?$orderby=Title%20asc",
            method: "GET",
            async: false,
            headers: { "Accept": "application/json; odata=verbose" },
            success: function (data) {
                success(data);
            },
            error: function (data) {
                failure(data);
            }
        });
    }
</script>

<script>
    $("#btnAddActivity").click(function () {
        $('.clearTextboxData').each(function () {
            $(this).val('');
        });
        $('.Required').each(function () {
            $(this).css({
                "border": ""
            });
        });
        $('#divActiviCreationErrors').empty();
        $('#chkFeedBackNeeded').prop('checked', false);
        $('#chkEmailRequired').prop('checked', false);
        $('#chkRemainderFrequncy').prop('checked', false);
        $("input:radio.isBajajEmpName").each(function (i) {
            $(this).prop('checked', false);
        });
        $('#isBajajEmpYes').prop('checked', false);
        $('#isBajajEmpNo').prop('checked', false);
        document.getElementById("divIsbajajEmp").style.display = "none";
        document.getElementById("actSpeakerDescription").style.display = "none";
        document.getElementById("divEmailRequried").style.display = "none";
        document.getElementById("divRemainderFrquency").style.display = "none";
        document.getElementById("divBajajEmployee").style.display = "none";
        $('#myModalP').modal('show');
    });


    var SelectID = ""; var FeedbackCheck = "";
    function GetActivityData() {
        $("#tblConfigParametersBind").html("");
        var programName = $('#txtProgramNameTextid').val().trim(/^\s+|\s+$/g, '');;
        jQuery.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('ConfigParameters')/items?$filter=ProgramName eq %27" + programName + "%27&$orderby=Sequence%20asc",
            type: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
                "content-type": "application/json;odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            success: function (d) {
                var arr = [];
                i = 0;
                $.each(d.d.results, function (index, results) {
                    if (results.Status == "Active") {
                        arr[i++] = index;
                    }
                });
                var Count = arr.length;
                $("#TotalCout").append("[ " + Count + " ]");
                $("#tblConfigParametersBind").empty();
                for (var j = 0; j < arr.length; j++) {
                    var arrConfigK = arr[j];
                    var index = parseInt(j + 1);

                    var ActivityName = d.d.results[arrConfigK].ActivityName;
                    var Duration = d.d.results[arrConfigK].Duration;
                    var UOM = d.d.results[arrConfigK].UOM;
                    var DurationInUOM = Duration;
                    var StartDate = d.d.results[arrConfigK].StartDate;
                    var EndDate = d.d.results[arrConfigK].EndDate;
                    var ActivityID = d.d.results[arrConfigK].ID;
                    var actStartTime = d.d.results[arrConfigK].ActivityStartTime;
                    var actEndTime = d.d.results[arrConfigK].ActivityEndTime;
                    var Sequence = d.d.results[arrConfigK].Sequence;
                    $("#tblConfigParametersBind").append("<tr><td>" + Sequence + "</td><td>" + ActivityName + "</td><td>" + DurationInUOM + "</td><td id='actStartDate'>" + StartDate + "</td><td id='actStartTime '>" + actStartTime + "</td><td id='actEndDate'>" + EndDate + "</td><td id='actactEndTime'>" + actEndTime + "</td><td width='10%'><input type='button' data-toggle='modal'  data-edit='popup-1'data-val='" + ActivityID + "' value='Edit' /></td><td width='10%'><input type='button'  data-delete='popup-1'data-val='" + ActivityID + "' value='Remove'> </td></tr>");

                }

                $('[data-delete]').on('click', function (e) {
                    SelectID = $(this).data('val');
                    var requestUri = _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getByTitle('ConfigParameters')/items(" + SelectID + ")";
                    $.ajax({
                        url: requestUri,
                        type: "POST",
                        headers: {
                            "ACCEPT": "application/json;odata=verbose",
                            "content-type": "application/json;odata=verbose",
                            "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                            "IF-MATCH": "*",
                            "X-HTTP-Method": "DELETE"
                        },
                        success: function (data) {
                            alert("Deleted Successfuly.");
                            GetActivityData();
                        },
                        error: function (error) {
                            alert(JSON.stringify(error));
                        },
                    });
                    e.preventDefault();
                });

                $('[data-edit]').on('click', function (e) {
                    $('.popRequired').each(function () {
                        $(this).css({
                            "border": ""
                        });
                    });
                    $('.clearTextboxData').each(function () {
                        $(this).val('');
                    });
                    $('#divpopMessage').empty();
                    //$(".clearTextboxData input[type='text']").val("");
                    $('#chkPopUpFeedBackNeeded').prop('checked', false);
                    $('#PopUpchkEmailRequired').prop('checked', false);
                    $('#PopUpchkRemainderFrequncy').prop('checked', false);
                    $("input:radio.isBajajEmpName").each(function (i) {
                        $(this).attr('checked', false);
                    });
                    $('#PopUpisBajajEmpYes').prop('checked', false);
                    $('#PopUpisBajajEmpNo').prop('checked', false);
                    document.getElementById("divPopUpIsbajajEmp").style.display = "none";
                    document.getElementById("actSpeakerDescription").style.display = "none";
                    document.getElementById("divPopUpEmailRequried").style.display = "none";
                    document.getElementById("divPopUpRemainderFrquency").style.display = "none";
                    document.getElementById("divPopUpBajajEmployee").style.display = "none";
                    document.getElementById("actPopUpSpeakerDescription").style.display = "none";
                    SelectID = $(this).data('val');
                    $('#myModalActivityUpdate').modal('show');
                    var requestUri = _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getByTitle('ConfigParameters')/items(" + SelectID + ")";
                    $.ajax({
                        url: requestUri,
                        type: "GET",
                        async: false,
                        headers: {
                            "accept": "application/json;odata=verbose",
                            "content-type": "application/json;odata=verbose",
                            "X-RequestDigest": $("#__REQUESTDIGEST").val()
                        },
                        success: function (d) {
                            $("#txtPopUpProgramName").val(d.d.ProgramName);
                            $("#txtPopUpActivityName").val(d.d.ActivityName);
                            $("#txtPopUpActivityDuration").val(d.d.Duration);

                            $("#ddlPopUpActivityStatus").val(d.d.Status);
                            $("#actPopUpStartDate").val(d.d.StartDate);
                            $("#actPopUpEndDate").val(d.d.EndDate);
                            $("#txtPopUpActivityUOM").val(d.d.UOM);
                            if (d.d.FeedBackRequired == "Yes") {
                                $("#chkPopUpFeedBackNeeded").prop("checked", true);
                                var AvtFeedID = SelectID.toString();
                                GetFeedBackDetails(AvtFeedID);
                            }
                            $("#actPopUpStartTime").val(d.d.ActivityStartTime);
                            $("#actPopUpEndTime").val(d.d.ActivityEndTime);

                            if (d.d.NeedEmailTemplate == "Yes") {
                                $('#PopUpchkEmailRequired').prop('checked', true);
                                $("#ddlPopUpEmailTemplateDropDown").val(d.d.EmailTemplateName);
                                document.getElementById("divPopUpEmailRequried").style.display = "block";
                            }

                            if (d.d.Remainder == "Yes") {
                                $('#PopUpchkRemainderFrequncy').prop('checked', true);
                                $("#ddlPopUpReaminderFrquency").val(d.d.RemainderFrequency);
                                document.getElementById("divPopUpRemainderFrquency").style.display = "block";
                            }

                            $("#txtPopUpActivitySequence").val(d.d.Sequence);
                        },
                        error: function () { console.log('fail'); }
                    });
                });
            },
            error: function () { console.log('fail'); }
        });
    }

    $("#btnActivityUpdate").click(function () {
        var ProgramName = document.getElementById("txtProgramNameTextid").value.trim(/^\s+|\s+$/g, '');;
        $('#divpopMessage').css('color', '');
        $('#divpopMessage').empty();
        var falseCount = 0;
        var TrueCoutn = 0;
        if (SelectID != null && SelectID != "") {
            var isValidTime = true;
            function CheckActDateTimeOnUpdate() {
                UpdateActivityDateCal();
                if ($('#tableActivity tr').length > 1) {
                    var getActivityDates = GetActivityDateDetails(ProgramName, SelectID);
                    for (var i = 0; i < getActivityDates.length; i++) {
                        var CactStrtDate = getActivityDates[i].ActivityStartDate;
                        var CactStrtTime = getActivityDates[i].ActivityStartTime;
                        var CactEndDate = getActivityDates[i].ActivityEndDate;
                        var CactEndTime = getActivityDates[i].ActivityEndTime;
                        console.log(CactStrtDate);
                        console.log(CactEndDate);
                        // Act Existing Start Date with time

                        var actStime = CactStrtTime;
                        var actSHhours = Number(actStime.match(/^(\d+)/)[1]);
                        var actsMinutes = Number(actStime.match(/:(\d+)/)[1]);
                        var AMPM = actStime.match(/\s(.*)$/)[1].toLowerCase();
                        if (AMPM == "pm" && actSHhours < 12) actSHhours = actSHhours + 12;
                        if (AMPM == "am" && actSHhours == 12) actSHhours = actSHhours - 12;
                        var actsHours = actSHhours.toString();
                        var actSsMinutes = actsMinutes.toString();
                        if (actSHhours < 10) actsHours = "0" + actsHours;
                        if (actsMinutes < 10) actSsMinutes = "0" + actSsMinutes;

                        // End of Existing Start Date with time

                        // Act Existing End Date with time
                        var actEtime = CactEndTime;
                        var actEHhours = Number(actEtime.match(/^(\d+)/)[1]);
                        var eminutes = Number(actEtime.match(/:(\d+)/)[1]);
                        var AMPM = actEtime.match(/\s(.*)$/)[1].toLowerCase();
                        if (AMPM == "pm" && actEHhours < 12) actEHhours = actEHhours + 12;
                        if (AMPM == "am" && actEHhours == 12) actEHhours = actEHhours - 12;
                        var acteHours = actEHhours.toString();
                        var actEsMinutes = eminutes.toString();
                        if (actEHhours < 10) acteHours = "0" + acteHours;
                        if (eminutes < 10) actEsMinutes = "0" + actEsMinutes;
                        // End of  Existing End Date with time



                        var time = $('#actPopUpStartTime').val();
                        var hours = Number(time.match(/^(\d+)/)[1]);
                        var minutes = Number(time.match(/:(\d+)/)[1]);
                        var AMPM = time.match(/\s(.*)$/)[1].toLowerCase();
                        if (AMPM == "pm" && hours < 12) hours = hours + 12;
                        if (AMPM == "am" && hours == 12) hours = hours - 12;
                        var sHours = hours.toString();
                        var sMinutes = minutes.toString();
                        if (hours < 10) sHours = "0" + sHours;
                        if (minutes < 10) sMinutes = "0" + sMinutes;

                        var pgetime = $('#actPopUpEndTime').val();

                        var pghours = Number(pgetime.match(/^(\d+)/)[1]);
                        var pgminutes = Number(pgetime.match(/:(\d+)/)[1]);
                        var pgAMPM = pgetime.match(/\s(.*)$/)[1].toLowerCase();
                        if (pgAMPM == "pm" && pghours < 12) pghours = pghours + 12;
                        if (pgAMPM == "am" && pghours == 12) pghours = pghours - 12;
                        //var pgsHours = pghours.toString();
                        //var pgsMinutes = pgminutes.toString();
                        //if (pghours < 10) pgsHours = "0" + pgsHours;
                        //if (pgminutes < 10) pgsMinutes = "0" + pgsMinutes;
                        var pgesHours = pghours.toString();
                        var pgesMinutes = pgminutes.toString();
                        if (pgesMinutes < 10) pgesHours = pgesHours;
                        if (pgesMinutes < 10) pgesMinutes = pgesMinutes;

                        var actStartDate = new Date($('#actPopUpStartDate').val());// + ' ' + sHours + ':' + sMinutes);
                        var actEndDate = new Date($('#actPopUpEndDate').val());// + ' ' + pgesHours + ':' + pgesMinutes);
                        var actStartDateTime = new Date(CactStrtDate);// + ' ' + actsHours + ':' + actSsMinutes);
                        var actEndDateTime = new Date(CactEndDate);// + ' ' + actEHhours + ':' + actEsMinutes);

                        var actEnterSDate = actStartDate.setHours(sHours, sMinutes, 0, 0);
                        var actEnterEDate = actEndDate.setHours(pgesHours, pgesMinutes, 0, 0);
                        var actbackEndSDate = actStartDateTime.setHours(actsHours, actSsMinutes, 0, 0);
                        var actbackEndEDate = actEndDateTime.setHours(acteHours, actEsMinutes, 0, 0);

                        var a = new Date(actEnterSDate);
                        var b = new Date(actEnterEDate);
                        var c = new Date(actbackEndSDate);
                        var d = new Date(actbackEndEDate);

                        if ((a >= c && a <= d) || (b >= c && b <= d)) {
                            $('#divpopMessage').css('color', '');
                            $('#divpopMessage').empty();
                            $('#divpopMessage').css('color', 'red');
                            $('#divpopMessage').append("Activity Date Time Already Entered.");
                            isValidTime = false;
                            falseCount = falseCount + 1;
                        }
                        else if (actEnterSDate != actbackEndSDate && actEnterEDate != actbackEndEDate) {
                            isValidTime = true;
                        }
                    }
                }
                if (falseCount > 0) {
                    $('#divpopMessage').css('color', '');
                    $('#divpopMessage').empty();
                    $('#divpopMessage').css('color', 'red');
                    $('#divpopMessage').append("Activity Date Time Already Entered.");
                    isValidTime = false;
                }
                return isValidTime;
            }
            if (ActivityUpdateValidations() && CheckActDateTimeOnUpdate()) {
                UpdateActivityDataInsertion(SelectID);
            }
        }
    });

    function GetFeedBackDetails(SelectID) {
        jQuery.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('FeedBackDetails')/items?$filter=ActiviTyID eq %27" + SelectID + "%27",
            type: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
                "content-type": "application/json;odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            success: function (d) {
                if (d.d.results[0].IsBajajEmployee == "Yes") {
                    $('#PopUpisBajajEmpYes').prop('checked', 'checked');
                    //$('#PopUpisBajajEmpYes').attr('checked', true);
                    document.getElementById("divPopUpIsbajajEmp").style.display = "block";
                    document.getElementById("divPopUpBajajEmployee").style.display = "block";
                    document.getElementById("actPopUpSpeakerDescription").style.display = "block";
                    $('#txtPopUpSpeakerEmpName').val(d.d.results[0].NameOfTheSpeaker);
                    $('#txtPopUpSpeakerECode').val(d.d.results[0].EmployeeCode);
                    $('#txtPopUpSpeakerEmail').val(d.d.results[0].SpeakerEmail);
                    $('#txtPopUpSpeakerDepartment').val(d.d.results[0].SpeakerDepartment);
                    $('#txtPopUpSpeakerDesc').val(d.d.results[0].SpeakerDesc);

                    $('#txtPopUpSpeakerEmail').attr('readonly', false);
                    $('#txtPopUpSpeakerEmpName').attr('readonly', true);
                    $('#txtPopUpSpeakerECode').attr('readonly', true);
                    $('#txtPopUpSpeakerDepartment').attr('readonly', true);
                }
                else if (d.d.results[0].IsBajajEmployee == "No") {
                    $('#PopUpisBajajEmpNo').prop('checked', 'checked');
                    document.getElementById("divPopUpIsbajajEmp").style.display = "block";
                    document.getElementById("divPopUpBajajEmployee").style.display = "block";
                    document.getElementById("actPopUpSpeakerDescription").style.display = "block";
                    $('#txtPopUpSpeakerEmail').attr('readonly', false);
                    $('#txtPopUpSpeakerEmpName').attr('readonly', false);
                    $('#txtPopUpSpeakerECode').attr('readonly', false);
                    $('#txtPopUpSpeakerDepartment').attr('readonly', false);
                    $('#txtPopUpSpeakerEmpName').val(d.d.results[0].NameOfTheSpeaker);
                    $('#txtPopUpSpeakerECode').val(d.d.results[0].EmployeeCode);
                    $('#txtPopUpSpeakerEmail').val(d.d.results[0].SpeakerEmail);
                    $('#txtPopUpSpeakerDepartment').val(d.d.results[0].SpeakerDepartment);
                    $('#txtPopUpSpeakerDesc').val(d.d.results[0].SpeakerDesc);
                }
            },
            error: function () {
                console.log("Fail In Speaker Details")
            }
        });
    }
</script>
<script>
    $("#txtActivitySequence").change(function () {
        var ActSequcne = document.getElementById("txtActivitySequence").value;
        var PgmName = $('#txtProgramName').val();
        $('#divActiviCreationErrors').empty();
        $('#txtActivitySequence').css('border-color', '');
        jQuery.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('ConfigParameters')/items?$filter=Sequence eq %27" + ActSequcne + "%27and ProgramName eq %27" + PgmName + "%27",
            type: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
                "content-type": "application/json;odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            success: function (d) {
                if (d.d.results.length > 0) {
                    $('#txtActivitySequence').css('border-color', 'red');
                    $('#divActiviCreationErrors').css('color', 'red');
                    $('#divActiviCreationErrors').append("Sequence Should Be Unique For Each Activity");
                    $('#txtActivitySequence').val('');
                    $("#txtActivitySequence").focus();
                }
            },
            error: function () {

                console.log("fail")
            }
        });


    });

</script>
<script>
    var PopupisFeedBackValue = "";
    $('#chkPopUpFeedBackNeeded').click(function () {
        $('#divPopEmpcheck').css({ "border": "" });
        if ($(this).prop("checked") == true) {
            PopupisFeedBackValue = "Yes";
            document.getElementById("divPopUpIsbajajEmp").style.display = "block";
        }
        else if (
                $(this).prop("checked") == false) {
            PopupisFeedBackValue = "No";
            document.getElementById("divPopUpIsbajajEmp").style.display = "none";
            document.getElementById("divPopUpBajajEmployee").style.display = "none";
            document.getElementById("actPopUpSpeakerDescription").style.display = "none";
            $('input[name="PopUpisBajajEmpName"]').attr('checked', false);
        }
    });
    var isPopUpEmailRequired = "";
    $('#PopUpchkEmailRequired').click(function () {
        if ($(this).prop("checked") == true) {
            isPopUpEmailRequired = "Yes";
            document.getElementById("divPopUpEmailRequried").style.display = "block";
        }
        else if (
                $(this).prop("checked") == false) {
            isPopUpEmailRequired = "No";
            document.getElementById("divPopUpEmailRequried").style.display = "none";
        }
    });
    var isPopUpRemainderFrequncy = "";
    $('#PopUpchkRemainderFrequncy').click(function () {
        if ($(this).prop("checked") == true) {
            isPopUpRemainderFrequncy = "Yes";
            document.getElementById("divPopUpRemainderFrquency").style.display = "block";
        }
        else if (
                $(this).prop("checked") == false) {
            isPopUpRemainderFrequncy = "No";
            document.getElementById("divPopUpRemainderFrquency").style.display = "none";
        }
    });
    $('#PopUpisBajajEmpYes').click(function () {
        $('#divPopEmpcheck').css({ "border": "" });
        document.getElementById("divPopUpBajajEmployee").style.display = "block";
        document.getElementById("actPopUpSpeakerDescription").style.display = "block";
        $('#txtPopUpSpeakerEmail').attr('readonly', false);
        $('#txtPopUpSpeakerEmpName').attr('readonly', true);
        $('#txtPopUpSpeakerECode').attr('readonly', true);
        $('#txtPopUpSpeakerDepartment').attr('readonly', true);
    });
    $('#PopUpisBajajEmpNo').click(function () {
        $('#divPopEmpcheck').css({ "border": "" });
        document.getElementById("divPopUpBajajEmployee").style.display = "block";
        document.getElementById("actPopUpSpeakerDescription").style.display = "block";
        $('#txtPopUpSpeakerEmail').attr('readonly', false); $('#txtPopUpSpeakerEmail').val("");
        $('#txtPopUpSpeakerEmpName').attr('readonly', false); $('#txtPopUpSpeakerEmpName').val("");
        $('#txtPopUpSpeakerECode').attr('readonly', false); $('#txtPopUpSpeakerECode').val("");
        $('#txtPopUpSpeakerDepartment').attr('readonly', false); $('#txtPopUpSpeakerDepartment').val("");
    });


    function ActivityUpdateValidations() {
        var isValid = true;
        $('#divpopMessage').empty();
        $('.popRequired').each(function () {
            if ($.trim($(this).val()) == '' || $.trim($(this).val()) == '0' || $.trim($(this).val()) == 'MM/DD/YYYY') {
                isValid = false;
                $(this).css({
                    "border": "1px solid red"
                });
            }
            else {
                $(this).css({
                    "border": ""
                });
            }
        });
        if (PopupisFeedBackValue == "Yes") {
            if ($("#PopUpisBajajEmpYes").is(':checked') == false && $("#PopUpisBajajEmpNo").is(':checked') == false) {
                isValid = false;
                $('#divPopEmpcheck').css({
                    "border": "1px solid red"
                });
            }
            if ($("#PopUpisBajajEmpYes").is(':checked') == true) {
                $('.PopvalidBajaemp').each(function () {
                    if ($.trim($(this).val()) == '' || $.trim($(this).val()) == '0') {
                        isValid = false;
                        $(this).css({
                            "border": "1px solid red"
                        });
                    }
                    else {
                        $(this).css({
                            "border": ""
                        });
                    }
                });
            }
            if ($("#PopUpisBajajEmpNo").is(':checked') == true) {
                $('.PopvalidBajaemp').each(function () {
                    if ($.trim($(this).val()) == '' || $.trim($(this).val()) == '0') {
                        isValid = false;
                        $(this).css({
                            "border": "1px solid red"
                        });
                    }
                    else {
                        $(this).css({
                            "border": ""
                        });
                    }
                });
                $('.PopvalidBajaemp').each(function () {
                    if ($.trim($(this).val()) == '' || $.trim($(this).val()) == '0') {
                        isValid = false;
                        $(this).css({
                            "border": "1px solid red"
                        });
                    }
                    else {
                        $(this).css({
                            "border": ""
                        });
                    }
                });
            }
        }
        if ($('#PopUpchkEmailRequired').is(":checked") && ($('#ddlPopUpEmailTemplateDropDown').val() == "" || $('#ddlPopUpEmailTemplateDropDown').val() == "0")) {
            $('#ddlPopUpEmailTemplateDropDown').css('color', 'red');
            isValid = false;
        }
        if ($('#PopUpchkRemainderFrequncy').is(":checked") && ($('#ddlPopUpReaminderFrquency').val() == "" || $('#ddlPopUpReaminderFrquency').val() == "0")) {
            $('#ddlPopUpReaminderFrquency').css('color', 'red');
            isValid = false;
        }

        if (isValid == false) {
            $('#divpopMessage').css('color', 'red');
            $('#divpopMessage').append("Highlighted Fields Are Mandatory");
        }
        else {
            $('#divpopMessage').css('color', '');
            $('#divpopMessage').empty();
        }
        return isValid;
    }
    function UpdateActivityDataInsertion(SelectID) {
        var ActivityName = document.getElementById("txtPopUpActivityName").value;
        var actStartDate = document.getElementById("actPopUpStartDate").value;
        var actStartTime = document.getElementById("actPopUpStartTime").value;
        var actEndDate = document.getElementById("actPopUpEndDate").value;
        var actEndTime = document.getElementById("actPopUpEndTime").value;
        var ActivityDuration = document.getElementById("txtPopUpActivityDuration").value;
        var ActivityUOM = document.getElementById("txtPopUpActivityUOM").value;
        var ActSequecnce = parseInt(document.getElementById("txtPopUpActivitySequence").value);
        var SpeakerEmail = document.getElementById("txtPopUpSpeakerEmail").value;
        var SpeakerEmpName = document.getElementById("txtPopUpSpeakerEmpName").value;
        var SpeakerECode = document.getElementById("txtPopUpSpeakerECode").value;
        var SpeakerDepartment = document.getElementById("txtPopUpSpeakerDepartment").value;
        var SpeakerDesc = document.getElementById("txtPopUpSpeakerDesc").value;

        var ddlEmailTemplate = document.getElementById("ddlPopUpEmailTemplateDropDown");
        var ddlEmainTemplateTitle = ddlEmailTemplate.options[ddlEmailTemplate.selectedIndex].value;
        var ddlEmainTemplateBody = ddlEmailTemplate.options[ddlEmailTemplate.selectedIndex].text;

        var ddlRemainderFr = document.getElementById("ddlPopUpReaminderFrquency");
        var ddlRemainderFrequency = ddlRemainderFr.options[ddlRemainderFr.selectedIndex].value;


        var ddlStatus = document.getElementById("ddlPopUpActivityStatus");

        var ddlStatusValue = ddlStatus.options[ddlStatus.selectedIndex].value;

        var ProgramName = document.getElementById("txtPopUpProgramName").value;

        var isBajajEmpName = $('input[name=PopUpisBajajEmpName]:radio:checked').val();
        var Feed = $('#chkPopUpFeedBackNeeded').prop('checked');
        if (Feed == true) {
            PopupisFeedBackValue = "Yes"
        }
        else {
            PopupisFeedBackValue = "No"
        }
        $.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getByTitle('ConfigParameters')/items(" + SelectID + ")",
            type: "POST",
            data: JSON.stringify({
                '__metadata': { 'type': 'SP.Data.ConfigParametersListItem' },
                'Title': ActivityName,
                'ActivityName': ActivityName,
                'Duration': ActivityDuration,
                'Sequence': ActSequecnce,
                'AlertsReminders': PopupisFeedBackValue,
                'Status': ddlStatusValue,
                'UOM': ActivityUOM,
                'StartDate': actStartDate,
                'EndDate': actEndDate,
                'ActivityStartTime': actStartTime,
                'ActivityEndTime': actEndTime,
                'FeedBackRequired': PopupisFeedBackValue,
                'NeedEmailTemplate': isPopUpEmailRequired,

                'EmailTemplateName': ddlEmainTemplateTitle,
                'EmailTemplateBody': ddlEmainTemplateBody,

                'Remainder': isPopUpRemainderFrequncy,
                'RemainderFrequency': ddlRemainderFrequency,
            }),
            headers: {
                "Accept": "application/json;odata=verbose",
                "content-type": "application/json; odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                "X-HTTP-Method": "MERGE",
                "If-Match": "*"
            },
            success: function (data) {
                if (PopupisFeedBackValue == "Yes") {
                    var ActiviTyID = SelectID;
                    var ACTID = ActiviTyID.toString();
                    FeedDetailsUpdate(SpeakerEmail, SpeakerEmpName, SpeakerECode, SpeakerDepartment, SpeakerDesc, ACTID, ActSequecnce, isBajajEmpName);
                    GetActivityData();
                }
                else if (PopupisFeedBackValue == "No") {
                    var ActiviTyID = SelectID;
                    var ACTID = ActiviTyID.toString();
                    DeleteFeedbackDetails(ACTID);
                    GetActivityData();
                    alert("Activity Updated Successfully.");
                    $('#myModalActivityUpdate').modal('hide');
                }
                else {
                    GetActivityData();
                    alert("Activity Updated successfully.");
                    $('#myModalActivityUpdate').modal('hide');
                }
            },
            error: function (err) {
                alert("Error while adding item: " + JSON.stringify(err));
            }
        });
    }
    function DeleteFeedbackDetails(ACTID) {
        var FeedbackUniqueID = getFeedUniqueID(ACTID);
        if (FeedbackUniqueID == "" || FeedbackUniqueID == "undefined") {
        }
        else {
            $.ajax({
                url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getByTitle('FeedBackDetails')/items(" + FeedbackUniqueID + ")",
                type: "POST",
                async: false,
                headers: {
                    "ACCEPT": "application/json;odata=verbose",
                    "content-type": "application/json;odata=verbose",
                    "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                    "IF-MATCH": "*",
                    "X-HTTP-Method": "DELETE"
                },
                success: function (data) {
                },
                error: function (error) {
                    alert(JSON.stringify(error));
                },
            });
        }
    }

    function FeedDetailsUpdate(SpeakerEmail, SpeakerEmpName, SpeakerECode, SpeakerDepartment, SpeakerDesc, ACTID, ActSequecnce, isBajajEmpName) {
        var FeedbackUniqueID = getFeedUniqueID(ACTID);
        if (FeedbackUniqueID == "" || FeedbackUniqueID == "undefined") {
            FeedDetailsInsertInPopup(SpeakerEmail, SpeakerEmpName, SpeakerECode, SpeakerDepartment, SpeakerDesc, ACTID, ActSequecnce, isBajajEmpName);
        }
        else {
            UpdateFeedbackUserdetails(SpeakerEmail, SpeakerEmpName, SpeakerECode, SpeakerDepartment, SpeakerDesc, ACTID, ActSequecnce, isBajajEmpName, FeedbackUniqueID);
        }

    }
    function UpdateFeedbackUserdetails(SpeakerEmail, SpeakerEmpName, SpeakerECode, SpeakerDepartment, SpeakerDesc, ACTID, ActSequecnce, isBajajEmpName, FeedbackUniqueID) {
        $.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getByTitle('FeedBackDetails')/items(" + FeedbackUniqueID + ")",
            type: "POST",
            async: false,
            data: JSON.stringify({
                '__metadata': { 'type': 'SP.Data.FeedBackDetailsListItem' },
                'Title': SpeakerEmpName,
                'SpeakerDepartment': SpeakerDepartment,
                'NameOfTheSpeaker': SpeakerEmpName,
                'EmployeeCode': SpeakerECode,
                'SpeakerDesc': SpeakerDesc,
                'ActiviTyID': ACTID,
                'SpeakerEmail': SpeakerEmail,
                'Sequence': ActSequecnce,
                'IsBajajEmployee': isBajajEmpName,
                'Status': "Active",
            }),
            headers: {
                "Accept": "application/json;odata=verbose",
                "content-type": "application/json; odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                "X-HTTP-Method": "MERGE",
                "If-Match": "*"
            },
            success: function (data) {
                alert("Activity Updated successfully.");
                GetActivityData();
                $('#myModalActivityUpdate').modal('hide');
            },
            error: function (err) {
                alert("Error while adding item: " + JSON.stringify(err));
            }
        });
    }
    function FeedDetailsInsertInPopup(SpeakerEmail, SpeakerEmpName, SpeakerECode, SpeakerDepartment, SpeakerDesc, ACTID, ActSequecnce, isBajajEmpName) {
        $.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getbytitle('FeedBackDetails')/items",
            type: "POST",
            async: false,
            data: JSON.stringify({
                '__metadata': { 'type': 'SP.Data.FeedBackDetailsListItem' },
                'Title': SpeakerEmpName,
                'SpeakerDepartment': SpeakerDepartment,
                'NameOfTheSpeaker': SpeakerEmpName,
                'EmployeeCode': SpeakerECode,
                'SpeakerDesc': SpeakerDesc,
                'ActiviTyID': ACTID,
                'SpeakerEmail': SpeakerEmail,
                'Sequence': ActSequecnce,
                'IsBajajEmployee': isBajajEmpName,
                'Status': "Active",
            }),
            headers: {
                "Accept": "application/json;odata=verbose",
                "content-type": "application/json; odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val(),
            },
            success: function (data) {
                alert("Activity Updated Successfully.");
                GetActivityData();
                $('#myModalActivityUpdate').modal('hide');

            },
            error: function (err) {
                alert("Error while adding item: " + JSON.stringify(err));
            }
        });
    }
    var FeedbackUnique = "";
    function getFeedUniqueID(ACTID) {
        jQuery.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('FeedBackDetails')/items?$filter=ActiviTyID eq %27" + ACTID + "%27",
            type: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
                "content-type": "application/json;odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            success: function (d) {
                if (d.d.results.length > 0) {
                    FeedbackUnique = d.d.results[0].ID;
                }
                else {
                    FeedbackUnique = "";
                }
            },
            error: function () {

                console.log("fail")
            }
        });
        return FeedbackUnique;
    }
</script>
<script>
    $("#txtPopUpActivitySequence").change(function () {
        var ActSequcne = document.getElementById("txtPopUpActivitySequence").value;
        var ProgramName = $("#txtPopUpProgramName").val();
        $('#divpopMessage').empty();
        $('#txtPopUpActivitySequence').css('border-color', '');
        jQuery.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('ConfigParameters')/items?$filter=Sequence eq %27" + ActSequcne + "%27and ProgramName eq %27" + ProgramName + "%27",
            type: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
                "content-type": "application/json;odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            success: function (d) {
                if (d.d.results.length > 0) {
                    $('#txtPopUpActivitySequence').css('border-color', 'red');
                    $('#divpopMessage').css('color', 'red');
                    $('#divpopMessage').append("Sequence Should Be Unique For Each Activity");
                    $('#txtPopUpActivitySequence').val('');
                    $("#txtPopUpActivitySequence").focus();
                }
            },
            error: function () {

                console.log("fail")
            }
        });
    });

</script>
<script>
    $("#actPopUpEndTime").change(function () {
        UpdateActivityDateCal();
    });
</script>


<script>
    $("#btnCreateProgram").click(function () {
        if (validateGroup()) {
            var PgrmName = document.getElementById("txtProgramName").value
            if (PgrmName != null && PgrmName != "") {
                ProgramtionCreation();
            }
        }
    });
    function validateGroup() {
        $('#divProgramActivityErrors').empty();
        $('#divProgramActivityErrors').css('color', '');
        var valid = true;
        var pgmStartDate = document.getElementById("txtProgramStartDate").value;
        var pgmEndtDate = document.getElementById("txtProgramEndDate").value;
        var ProgramStartDate = new Date(pgmStartDate);
        var ProgramEndDate = new Date(pgmEndtDate);
        var table = $("#tableActivity tbody");
        table.find('tr').each(function (i) {
            var $tds = $(this).find('td');
            var UOM = $tds.eq(2).text();
            var start = $tds.eq(3).text();
            var End = $tds.eq(4).text();
            $tds.eq(2).css("border-color", "");
            $tds.eq(3).css("border-color", "");
            $tds.eq(4).css("border-color", "");
            if (UOM == '' || UOM == null) {
                $tds.eq(2).css("border-color", "red");
                valid = false;
            }
            if (start == '' || start == 'MM/DD/YYYY') {
                $tds.eq(3).css("border-color", "red");
                $tds.eq(4).css("border-color", "red");
                valid = false;
            } if (start != '' || start != 'MM/DD/YYYY') {
                var strFdate = new Date(start);
                if (strFdate < ProgramStartDate || start > ProgramEndDate) {
                    $tds.eq(3).css("border-color", "red");
                    valid = false;
                }
            }
            if (End == '' || start == 'MM/DD/YYYY') {
                $tds.eq(4).css("border-color", "red");
                valid = false;

            } if (End != '' || End != 'MM/DD/YYYY') {
                var strEdate = new Date(End);
                if (strEdate < ProgramStartDate || strEdate > ProgramEndDate) {
                    $tds.eq(4).css("border-color", "red");
                    valid = false;
                }
            }
        });
        if ($('#tableActivity tr').length <= 1) {
            $('#divProgramActivityErrors').css('color', 'red');
            $('#divProgramActivityErrors').append("Activity Details Should Not Be Blank");
            valid = false;
        }
        if (valid == false) {
            if ($('#tableActivity tr').length > 1) {
                $('#divProgramActivityErrors').css('color', 'red');
                $('#divProgramActivityErrors').append("Highlighted Fields Are Mandatory");
            }
        }
        return valid;
    }

    var arrActivityID = []; var arrAlertsReminders = []; iarrAlertsReminders = 0;
    ActivityID = 0;

    var arrActivityName = []; var arrRemainder = []; iRemainder = 0;
    iarrActivityName = 0;

    var arrActivityDuration = []; var arrRemainderFrequency = []; iRemainderFrequency = 0;
    iarrActivityDuration = 0;

    var arrActivityStartDate = []; var arrNeedEmailTemplate = []; iNeedEmailTemplate = 0;
    iarrActivityStartDate = 0;

    var arrActivityEndDate = []; var arrEmailTemplateName = []; iEmailTemplateName = 0;
    iarrActivityEndDate = 0;

    var arrActivitySeq = []; var arrEmailTemplateBody = []; iEmailTemplateBody = 0;
    iarrActivitySeq = 0;

    var arrActivityUOM = []; var arrActivityStartTime = []; iActivityStartTime = 0;
    iarrActivityUOM = 0;

    var arrFeedBackNeed = []; var arrActivityEndTime = []; iActivityEndTime = 0;
    iarrFeedBackNeed = 0;
    function GetactData() {

        var ProgramName = $('#txtProgramNameTextid').val().trim(/^\s+|\s+$/g, '');
        $.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getbytitle('ConfigParameters')/items?$filter=ProgramName eq %27" + ProgramName + "%27",
            type: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
                "content-type": "application/json;odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            success: function (d) {
                var arr = [];
                i = 0;
                $.each(d.d.results, function (index, results) {
                    if (results.Status == "Active") {
                        arr[i++] = index;
                    }
                });
                for (var k = 0; k < arr.length; k++) {
                    var arrK = arr[k];
                    arrActivityID[ActivityID++] = d.d.results[arrK].ID;
                    arrActivityName[iarrActivityName++] = d.d.results[arrK].ActivityName;
                    arrActivityDuration[iarrActivityDuration++] = d.d.results[arrK].Duration;
                    arrActivityStartDate[iarrActivityStartDate++] = d.d.results[arrK].StartDate;
                    arrActivityEndDate[iarrActivityEndDate++] = d.d.results[arrK].EndDate;
                    arrActivitySeq[iarrActivitySeq++] = d.d.results[arrK].Sequence;
                    arrActivityUOM[iarrActivityUOM++] = d.d.results[arrK].UOM;
                    arrFeedBackNeed[iarrFeedBackNeed++] = d.d.results[arrK].FeedBackRequired;
                    arrAlertsReminders[iRemainder] = d.d.results[arrK].AlertsReminders;

                    arrRemainder[iRemainder++] = d.d.results[arrK].Remainder;
                    arrRemainderFrequency[iRemainderFrequency++] = d.d.results[arrK].RemainderFrequency;
                    arrNeedEmailTemplate[iNeedEmailTemplate++] = d.d.results[arrK].NeedEmailTemplate;
                    arrEmailTemplateName[iEmailTemplateName++] = d.d.results[arrK].EmailTemplateName;
                    arrEmailTemplateBody[iEmailTemplateBody++] = d.d.results[arrK].EmailTemplateBody;

                    arrActivityStartTime[iActivityStartTime++] = d.d.results[arrK].ActivityStartTime;
                    arrActivityEndTime[iActivityEndTime++] = d.d.results[arrK].ActivityEndTime;
                }
            },
            error: function () { console.log('fail'); }
        });
    }

    function ProgramtionCreation() {
        var ProgramNameText = document.getElementById("txtProgramNameTextid").value.trim(/^\s+|\s+$/g, '');;
        var ProgramLocationText = document.getElementById("txtProgramLocationText").value;
        var ProgramVenue = document.getElementById("txtProgramVenue").value;
        var ProgramStatus = document.getElementById("ddlProgramStatus").value;
        var ProgramStartDate = document.getElementById("txtProgramStartDate").value;
        var ProgramEndDate = document.getElementById("txtProgramEndDate").value;
        var ProgramDesc = document.getElementById("txtProgramDesc").value;
        var PrgmRemainFr = $("#ddlProgramRemainderFrquency").val();
        var PrgmRemaintxt = $("#ddlProgramRemainderFrquency :selected").text();
        var CreatedByUserEmail = LoginUserEmail();
        GetactData();

        if (arrActivityID.length > 0) {
            for (var i = 0; i < arrActivityID.length; i++) {

                var ActivityID = arrActivityID[i];
                var AcID = ActivityID.toString();
                var ActivityName = arrActivityName[i];
                var ActivityDuration = arrActivityDuration[i];
                var ActivityStartDate = arrActivityStartDate[i];
                var ActivityEndDate = arrActivityEndDate[i];
                var ActSeq = arrActivitySeq[i];
                var ActUOM = arrActivityUOM[i];
                var FeedBackNeed = arrFeedBackNeed[i];
                var AlertsReminders = arrAlertsReminders[i];
                var Remainder = arrRemainder[i];
                var RemainderFrequency = arrRemainderFrequency[i];
                var NeedEmailTemplate = arrNeedEmailTemplate[i];
                var EmailTemplateBody = arrEmailTemplateBody[i];
                var ActivityStartTime = arrActivityStartTime[i];
                var ActivityEndTime = arrActivityEndTime[i];
                var EmailTemplateName = arrEmailTemplateName[i];


                var pgrmSdate = new Date(ProgramStartDate);
                var pgrmEdate = new Date(ProgramEndDate);
                var actSdate = new Date(arrActivityStartDate[i]);
                var actEDate = new Date(arrActivityEndDate[i]);

                var millisecondsPerDay = 1000 * 60 * 60 * 24;

                var millisBetween = actSdate.getTime() - pgrmSdate.getTime();
                var days = millisBetween / millisecondsPerDay;
                var noof = parseInt(days) + 1;
                var Datewise = "Day " + noof + " " + arrActivityStartDate[i];
                var Sequnce = parseInt(ActSeq);

                $.ajax({
                    url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('NewInductionProgram')/items",
                    type: "POST",
                    async: false,
                    data: JSON.stringify({
                        '__metadata': { 'type': 'SP.Data.NewInductionProgramListItem' },
                        'Title': ProgramNameText,
                        'ProgramName': ProgramNameText,
                        'ProgramStartDate': ProgramStartDate,
                        'ProgramEndDate': ProgramEndDate,
                        'ProgramLocation': ProgramLocationText,
                        'ProgramVenue': ProgramVenue,
                        'ProgramDesc': ProgramDesc,
                        'RemainderFrValue': PrgmRemainFr,
                        'RemainderFrText': PrgmRemaintxt,
                        'ActivityEndTime': ActivityStartTime,
                        'ActivityStartTime': ActivityEndTime,
                        'ActivityID': AcID,
                        'ActivityName': ActivityName,
                        'ActivityDuration': ActivityDuration,
                        'ActivityStartDate': ActivityStartDate,
                        'ActivityEndDate': ActivityEndDate,
                        'actSequence': Sequnce,
                        'UOM': ActUOM,
                        'FeedBackNeed': FeedBackNeed,
                        'ProgramStatus': ProgramStatus,
                        'Status': 'Active',
                        'DayWise': Datewise,

                        'Remainder': Remainder,
                        'RemainderFrequency': RemainderFrequency,
                        'NeedEmailTemplate': NeedEmailTemplate,
                        'EmailTemplateName': EmailTemplateName,
                        'EmailTemplateBody': EmailTemplateBody,
                        'CreatedByUser': CreatedByUserEmail,


                    }),
                    headers: {
                        "Accept": "application/json;odata=verbose",
                        "content-type": "application/json; odata=verbose",
                        "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                    },
                    success: function (data) {
                        //alert("Program Created successfully");
                    },
                    error: function (err) {
                        alert("Error while adding item: " + JSON.stringify(err));
                    }
                });
            }
            alert("Program Created Successfully.");
            window.location.reload();
        }
    }
</script>
<script type="text/javascript">
    $("#txtProgramNameTextid").change(function () {
        var ProgramNameTextid = document.getElementById("txtProgramNameTextid").value.trim(/^\s+|\s+$/g, '');;
        $('#divProgramErrors').empty();
        $('#txtProgramNameTextid').css('border-color', '');
        jQuery.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('ProgramMaster')/items?$filter=Title eq %27" + ProgramNameTextid + "%27",
            type: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
                "content-type": "application/json;odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            success: function (d) {
                if (d.d.results.length > 0) {
                    $('#txtProgramNameTextid').css('border-color', 'red');
                    $('#divProgramErrors').css('color', 'red');
                    $('#divProgramErrors').append("Program Already Exists");
                    $('#txtProgramNameTextid').val('');
                    $("#txtProgramNameTextid").focus();
                }
            },
            error: function () {

                console.log("fail")
            }
        });
    });

</script>


<script>
    var arrActivityID = []; iActivityID = 0; var ActivityDetails = [];
    function GetChangeData() {
        $("#ddlProgramBind").change(function () {
            $('#ddlProgramBind').css('border-color', '');
            $('#divErrorMessage').css('color', '');
            $('#divErrorMessage').empty();
            ActivityDetails = [];
            var ProgramName = $('#ddlProgramBind').val();
            $.ajax({
                url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('ConfigParameters')/items?$filter=ProgramName eq %27" + ProgramName + "%27",
                type: "GET",
                async: false,
                headers: {
                    "accept": "application/json;odata=verbose",
                    "content-type": "application/json;odata=verbose",
                    "X-RequestDigest": $("#__REQUESTDIGEST").val()
                },
                success: function (d) {
                    var arr = [];
                    i = 0;
                    $.each(d.d.results, function (index, results) {
                        arr[i++] = index;
                    });
                    $("#tbodyActivitiesInhirit").empty();
                    for (var k = 0; k < arr.length; k++) {
                        var arrK = arr[k];
                        var pgmChek = d.d.results[arrK].ProgramName.replace(/\s/g, "");
                        var pgmChek1 = ProgramName.replace(/\s/g, "");
                        if (pgmChek == pgmChek1) {
                            var ActivityName = d.d.results[arrK].ActivityName;
                            var Duration = d.d.results[arrK].Duration;
                            var ActivityID = d.d.results[arrK].ID;
                            var FeedBackRequired = d.d.results[arrK].FeedBackRequired;
                            var ActivityStartTime = d.d.results[arrK].ActivityStartTime;
                            var ActivityEndTime = d.d.results[arrK].ActivityEndTime;
                            var StartDate = d.d.results[arrK].StartDate;
                            var EndDate = d.d.results[arrK].EndDate;
                            var Sequence = d.d.results[arrK].Sequence;
                            arrActivityID[iActivityID++] = d.d.results[arrK].ID;
                            ActivityDetails.push({
                                ActID: ActivityID, ActName: ActivityName, Duration: Duration,
                                ActivityStartTime: ActivityStartTime, ActivityEndTime: ActivityEndTime, StartDate: StartDate,
                                EndDate: EndDate, FeedBackRequired: FeedBackRequired, Sequence: Sequence
                            });
                            $("#tbodyActivitiesInhirit").append("<tr><td><input type='checkbox' class='myCheckbox' value=" + ActivityID + " /></td><td>" + ActivityName + "</td><td>" + Duration + "</td></tr>");
                        }
                    }
                },
                error: function (err) {
                    alert("Error while adding item: " + JSON.stringify(err));
                }
            });
        });
        return ActivityDetails;
    }

    $("#btnInhiritActivity").click(function () {
        $('#divErrorMessage').empty();
        $('.myCheckbox').prop('checked', false);
        $('#myProgramInhirit').modal('show');
        GetChangeData();
        $("#ddlProgramBind option:first").prop("selected", "selected");
    });
</script>
<script>
    $(document).ready(function () {
        PopulateProgramDropDown();

    });

    function PopulateProgramDropDown() {
        var listName = "NewInductionProgram";
        var url = _spPageContextInfo.webAbsoluteUrl;
        getProgram(listName, url, function (data) {
            var items = data.d.results;
            var programBind = GroupByProgramData(items, 'ProgramName');
            var inputElement = '<select id="ddlProgramBind" class="form-control"><option  value="">Select</option>';
            // Add all the new items
            for (var i = 0; i < programBind.length; i++) {
                var itemId = programBind[i],
                    itemVal = programBind[i];
                inputElement += '<option value="' + itemVal + '"selected>' + itemId + '</option>';

            }
            inputElement += '</select>';

            $('#divProgramBind').append(inputElement);

            $("#ddlProgramBind").each(function () {
                $('option', this).each(function () {
                    if ($(this).text() == 'Select') {
                        $(this).attr('selected', 'selected')
                    };
                });
            });

        }, function (data) {
            alert("An error occured while getting ConfigParameters. Please try again");
        });
    }
    function getProgram(listName, siteurl, success, failure) {
        $.ajax({
            url: siteurl + "/_api/web/lists/getbytitle('" + listName + "')/items",

            method: "GET",
            headers: { "Accept": "application/json; odata=verbose" },
            success: function (data) {
                success(data);
            },
            error: function (data) {
                failure(data);
            }
        });
    }
    function GroupByProgramData(items, propertyName) {
        var result = [];
        $.each(items, function (index, item) {
            if ($.inArray(item[propertyName], result) == -1) {
                result.push(item[propertyName]);
            }
        });
        return result;
    }
</script>
<script>
    $(document).on('click', '.allCheckbox', function () {
        if ($(this).is(':checked') == true) {
            $('.myCheckbox').prop('checked', true);
            $("#divErrorMessage").empty();
        }
        else {
            $('.myCheckbox').prop('checked', false);
        }
    });
    var newArray = [];
    var checkedIDArray = [];

    $('#btnProgramInhiret').click(function () {
        var InheritProgram = $('#ddlProgramBind').val();
        $('#ddlProgramBind').css('border-color', '');
        if (InheritProgram == "") {
            $("#divErrorMessage").empty();
            $('#divErrorMessage').css('color', 'red');
            $("#divErrorMessage").append("Please Select Program");
            $('#ddlProgramBind').css('border-color', 'red');
            return false;
        }
        else if ($('input[class=myCheckbox]:checked').length == 0) {
            $("#divErrorMessage").empty();
            $('#divErrorMessage').css('color', 'red');
            $("#divErrorMessage").append("Please Check Atleast One Checkbox");
            return false;
        }
        var ActID = GetChangeData();

        $('.myCheckbox').each(function () {
            var checkedVal = $(this).val();
            var checked = $(this).is(':checked');
            if (checked == true) {
                checkedIDArray.push(checkedVal);
            }
        });
        newArray = [];
        for (j = 0; j < ActID.length; j++) {
            $('.myCheckbox').each(function () {
                var checkedVal = $(this).val();
                var checked = $(this).is(':checked');
                if (checked == true) {
                    if (checkedVal == ActID[j].ActID) {
                        var obj = {
                            ActivityID: ActID[j].ActID,//ActivityID[j],
                            ActivityName: ActID[j].ActName,//ActivityID[j],
                            Duration: ActID[j].Duration,
                            StartDate: ActID[j].StartDate,
                            EndDate: ActID[j].EndDate,
                            ActivityStartTime: ActID[j].ActivityStartTime,
                            ActivityEndTime: ActID[j].ActivityEndTime,
                            ActivityEndTime: ActID[j].ActivityEndTime,
                            FeedBackRequired: ActID[j].FeedBackRequired,
                            Sequence: ActID[j].Sequence,
                        }
                        newArray.push(obj);
                    }
                }
            });
        }
        $("#tbodyActivitiesInhirit").empty();
        InsertInheritActivities();
        GetActivityData();
        $('#myProgramInhirit').modal('hide');
    });

    function InsertInheritActivities() {
        if (newArray.length > 0) {
            for (var i = 0; i < newArray.length; i++) {
                var programName = $('#txtProgramNameTextid').val().trim(/^\s+|\s+$/g, '');;
                var ProgramLocationText = $('#txtProgramLocationText').val();
                var ProgramStatus = $('#ddlProgramStatus').val();
                var ProgramStartDate = $('#txtProgramStartDate').val();
                var ProgramEndDate = $('#txtProgramEndDate').val();
                var Programdesc = $('#txtProgramDesc').val(); txtProgramDesc
                $.ajax({
                    url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('ConfigParameters')/items",
                    type: "POST",
                    async: false,
                    data: JSON.stringify({
                        '__metadata': { 'type': 'SP.Data.ConfigParametersListItem' },
                        'Status': "Active",
                        'ActivityName': newArray[i].ActivityName,
                        'Duration': newArray[i].Duration,
                        'StartDate': newArray[i].StartDate,
                        'EndDate': newArray[i].EndDate,
                        'ActivityStartTime': newArray[i].ActivityStartTime,
                        'ActivityEndTime': newArray[i].ActivityEndTime,
                        'FeedBackRequired': newArray[i].FeedBackRequired,
                        'Sequence': newArray[i].Sequence,
                        'ProgramName': programName,
                        'ProgramStartDate': ProgramStartDate,
                        'ProgramEndDate': ProgramEndDate,
                        'ProgramLocation': ProgramLocationText,
                        'ProgramVenue': "",
                    }),
                    headers: {
                        "Accept": "application/json;odata=verbose",
                        "content-type": "application/json; odata=verbose",
                        "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                    },
                    success: function (data) {
                        if (newArray[i].FeedBackRequired == 'Yes') {
                            var ActID = data.d.ID.toString();
                            var intSequence = parseInt(newArray[i].Sequence);
                            var intactivityId = newArray[i].ActivityID;
                            var arrGetSpeakerDetials = GetSpeakerDetials(intSequence, intactivityId);
                            InsertInheritFeedback(arrGetSpeakerDetials, ActID);
                        }
                    },
                    error: function (err) {
                        alert("Error while adding item: " + JSON.stringify(err));
                    }
                });
            }

        }
    }
    function GetSpeakerDetials(intSequence, intactivityId) {
        var getAllSepakerDetails = [];
        $.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getbytitle('FeedBackDetails')/items?$filter=ActiviTyID eq  '" + intactivityId + "' and Sequence eq " + intSequence + "",
            type: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
                "content-type": "application/json;odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            success: function (d) {
                getAllSepakerDetails = [];
                if (d.d.results.length > 0) {
                    getAllSepakerDetails.push({
                        NameOfTheSpeaker: d.d.results[0].NameOfTheSpeaker,
                        EmployeeCode: d.d.results[0].EmployeeCode,
                        SpeakerDesc: d.d.results[0].SpeakerDesc,
                        Sequence: d.d.results[0].Sequence,
                        IsBajajEmployee: d.d.results[0].IsBajajEmployee,
                        SpeakerDepartment: d.d.results[0].SpeakerDepartment,
                        NameOfTheSpeaker: d.d.results[0].NameOfTheSpeaker,
                        SpeakerEmail: d.d.results[0].SpeakerEmail,
                    });
                }

            },
            error: function () { console.log('fail'); }
        });
        return getAllSepakerDetails;
    }
    function InsertInheritFeedback(arrGetSpeakerDetials, ActID) {
        if (arrGetSpeakerDetials.length > 0) {
            var NameOfTheSpeaker = arrGetSpeakerDetials[0].NameOfTheSpeaker;
            var EmployeeCode = arrGetSpeakerDetials[0].EmployeeCode;
            var SpeakerDesc = arrGetSpeakerDetials[0].SpeakerDesc;
            var Sequence = arrGetSpeakerDetials[0].Sequence;
            var IsBajajEmployee = arrGetSpeakerDetials[0].IsBajajEmployee;
            var SpeakerDepartment = arrGetSpeakerDetials[0].SpeakerDepartment;
            var SpeakerEmail = arrGetSpeakerDetials[0].SpeakerEmail;
            $.ajax({
                url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('FeedBackDetails')/items",
                type: "POST",
                async: false,
                data: JSON.stringify({
                    '__metadata': { 'type': 'SP.Data.FeedBackDetailsListItem' },
                    'Title': NameOfTheSpeaker,
                    'NameOfTheSpeaker': NameOfTheSpeaker,
                    'EmployeeCode': EmployeeCode,
                    'SpeakerDesc': SpeakerDesc,
                    'Sequence': Sequence,
                    'IsBajajEmployee': IsBajajEmployee,
                    'SpeakerDepartment': SpeakerDepartment,
                    'SpeakerEmail': SpeakerEmail,
                    'ActiviTyID': ActID
                }),
                headers: {
                    "Accept": "application/json;odata=verbose",
                    "content-type": "application/json; odata=verbose",
                    "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                },
                success: function (data) {
                },
                error: function (err) {
                    alert("Error while adding item: " + JSON.stringify(err));
                }
            });
        }
    }

</script>

<script>
    $("#txtPopUpSpeakerEmail").change(function () {
        $('#divpopMessage').empty();
        $('#txtPopUpSpeakerEmail').css('color', '');
        var SpeakerEmail = document.getElementById("txtPopUpSpeakerEmail").value;
        var isBajajEmpName = $('input[name=PopUpisBajajEmpName]:radio:checked').val();
        if (isBajajEmpName == "Yes") {
            $.ajax({
                url: _spPageContextInfo.webAbsoluteUrl + "/_api/SP.UserProfiles.PeopleManager/GetPropertiesFor(accountName=@v)?@v=%27i:0%23.f|membership|" + SpeakerEmail + "%27",
                type: "GET",
                async: false,
                headers: {
                    "accept": "application/json;odata=verbose",
                    "content-type": "application/json;odata=verbose",
                    "X-RequestDigest": $("#__REQUESTDIGEST").val()
                },
                success: function (d) {
                    if (d.d.DisplayName == 'undefined' || d.d.DisplayName == null || d.d.DisplayName == '') {
                        $('#divpopMessage').css('color', 'red');
                        $('#txtPopUpSpeakerEmail').css('border-color', 'red');
                        $('#divpopMessage').append("Please Enter Valid Bajaj Employee Email");
                    }
                    else {
                        var DeptName = d.d.UserProfileProperties.results[11].Value;
                        var EmpCode = d.d.UserProfileProperties.results[4].Value;
                        var EmpName = d.d.DisplayName;

                        var DeptName = d.d.UserProfileProperties.results[11].Value;
                        var EmpCode = d.d.UserProfileProperties.results[19].Value;
                        var EmpName = d.d.DisplayName;

                        var UserWithoutDomain = EmpCode.substring(0, EmpCode.lastIndexOf("@"));
                        var EcodeUpper = UserWithoutDomain.toUpperCase();

                        $("#txtPopUpSpeakerEmpName").val(EmpName);
                        $("#txtPopUpSpeakerECode").val(EcodeUpper);
                        $("#txtPopUpSpeakerDepartment").val(DeptName);
                    }
                },
                error: function () { console.log('fail'); }
            });
        }
    });

</script>
<script>
    var currentuserEmailID = "";
    function LoginUserEmail() {

        $.ajax({
            async: false,
            url: _spPageContextInfo.webServerRelativeUrl + "//_api/SP.UserProfiles.PeopleManager/GetMyProperties?$select=email",
            method: "GET",
            headers: {
                "accept": "application/json;odata=verbose"
            },
            success: function (d) {
                currentuserEmailID = d.d.Email;

            },
            error: function (err) {
                alert(JSON.stringify(err));
            }
        });
        return currentuserEmailID;
    }

</script>
<script>
    $('#txtProgramLocationText').change(function () {
        if ($(this).val != '') {
            $('#txtProgramLocationText').css('border-color', '');
            $('#divProgramErrors').css('color', '');
            $('#divProgramErrors').empty();
        }
    });
    $('#txtProgramDesc').change(function () {
        if ($(this).val != '') {
            $('#txtProgramDesc').css('border-color', '');
            $('#divProgramErrors').css('color', '');
            $('#divProgramErrors').empty();
        }
    });
    $('#ddlProgramRemainderFrquency').change(function () {
        if ($(this).val != '') {
            $('#ddlProgramRemainderFrquency').css('border-color', '');
            $('#divProgramErrors').css('color', '');
            $('#divProgramErrors').empty();
        }
    });
    $('#ddlProgramBind').change(function () {
        if ($(this).val != '') {
            $('#ddlProgramBind').css('border-color', '');
            $('#divErrorMessage').css('color', '');
            $('#divErrorMessage').empty();
        }
    });
    $('#txtActivityName').change(function () {
        if ($(this).val != '') {
            $('#txtActivityName').css('border-color', '');
            $('#divActiviCreationErrors').css('color', '');
            $('#divActiviCreationErrors').empty();
        }
    });

    $('#actStartDate').change(function () {
        if ($(this).val != '') {
            $('#actStartDate').css('border-color', '');
            $('#divActiviCreationErrors').css('color', '');
            $('#divActiviCreationErrors').empty();
        }
    });
    $('#actEndDate').change(function () {
        if ($(this).val != '') {
            $('#actEndDate').css('border-color', '');
            $('#divActiviCreationErrors').css('color', '');
            $('#divActiviCreationErrors').empty();
        }
    });
    $('#txtPopUpActivityName').change(function () {
        if ($(this).val != '') {
            $('#txtPopUpActivityName').css('border-color', '');
            $('#divpopMessage').css('color', '');
            $('#divpopMessage').empty();
        }
    });
    $('#actPopUpStartDate').change(function () {
        if ($(this).val != '') {
            $('#actPopUpStartDate').css('border-color', '');
            $('#divpopMessage').css('color', '');
            $('#divpopMessage').empty();
        }
    });
    $('#actPopUpStartTime').change(function () {
        if ($(this).val != '') {
            $('#actPopUpStartTime').css('border-color', '');
            $('#divpopMessage').css('color', '');
            $('#divpopMessage').empty();
        }
    });
    $('#actPopUpEndDate').change(function () {
        if ($(this).val != '') {
            $('#actPopUpEndDate').css('border-color', '');
            $('#divpopMessage').css('color', '');
            $('#divpopMessage').empty();
        }
    });
    $('#actPopUpEndTime').change(function () {
        if ($(this).val != '') {
            $('#actPopUpEndTime').css('border-color', '');
            $('#divpopMessage').css('color', '');
            $('#divpopMessage').empty();
        }
    });
    //$('#txtSpeakerEmail').change(function () {
    //    if ($(this).val != '') {
    //        $('#txtSpeakerEmail').css('border-color', '');
    //        $('#divActiviCreationErrors').css('color', '');
    //        $('#divActiviCreationErrors').empty();
    //    }
    //});
    $('#txtSpeakerEmpName').change(function () {
        if ($(this).val != '') {
            $('#txtSpeakerEmpName').css('border-color', '');
            $('#divActiviCreationErrors').css('color', '');
            $('#divActiviCreationErrors').empty();
        }
    });
    $('#txtSpeakerECode').change(function () {
        if ($(this).val != '') {
            $('#txtSpeakerECode').css('border-color', '');
            $('#divActiviCreationErrors').css('color', '');
            $('#divActiviCreationErrors').empty();
        }
    });
    $('#txtSpeakerDepartment').change(function () {
        if ($(this).val != '') {
            $('#txtSpeakerDepartment').css('border-color', '');
            $('#divActiviCreationErrors').css('color', '');
            $('#divActiviCreationErrors').empty();
        }
    });
    $('#txtSpeakerDepartment').change(function () {
        if ($(this).val != '') {
            $('#txtSpeakerDepartment').css('border-color', '');
            $('#divActiviCreationErrors').css('color', '');
            $('#divActiviCreationErrors').empty();
        }
    });
    $('#txtPopUpSpeakerEmpName').change(function () {
        if ($(this).val != '') {
            $('#txtPopUpSpeakerEmpName').css('border-color', '');
            $('#divpopMessage').css('color', '');
            $('#divpopMessage').empty();
        }
    });
    $('#txtPopUpSpeakerECode').change(function () {
        if ($(this).val != '') {
            $('#txtPopUpSpeakerECode').css('border-color', '');
            $('#divpopMessage').css('color', '');
            $('#divpopMessage').empty();
        }
    });
    $('#txtPopUpSpeakerDepartment').change(function () {
        if ($(this).val != '') {
            $('#txtPopUpSpeakerDepartment').css('border-color', '');
            $('#divpopMessage').css('color', '');
            $('#divpopMessage').empty();
        }
    });
</script>


<!-- Activity Time Clash Check-->
<script>
    var arrAllDateTimes = [];
    function GetActivityDateDetails(ProgramName, SelectID) {
        jQuery.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('ConfigParameters')/items?$filter=ProgramName eq  '" + ProgramName + "' and ID ne " + SelectID + "",
            type: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
                "content-type": "application/json;odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            success: function (d) {
                var arr = []; i = 0;
                $.each(d.d.results, function (index, results) {
                    arr[i++] = index;
                });
                arrAllDateTimes = [];
                for (var j = 0; j < arr.length; j++) {
                    var arrK = arr[j];
                    var ActivityStartDate = d.d.results[arrK].StartDate;
                    var ActivityStartTime = d.d.results[arrK].ActivityStartTime;
                    var ActivityEndDate = d.d.results[arrK].EndDate;
                    var ActivityEndTime = d.d.results[arrK].ActivityEndTime;
                    arrAllDateTimes.push({
                        ActivityStartDate: ActivityStartDate, ActivityStartTime: ActivityStartTime,
                        ActivityEndDate: ActivityEndDate, ActivityEndTime: ActivityEndTime
                    });
                }
            },
            error: function () { console.log('fail'); }
        });
        return arrAllDateTimes;
    }
</script>
<!-- End Of Activity Time Clash Check-->

<script>
    function GetActivityTimeCal() {
        var time = $('#actStartTime').val();
        var hours = Number(time.match(/^(\d+)/)[1]);
        var minutes = Number(time.match(/:(\d+)/)[1]);
        var AMPM = time.match(/\s(.*)$/)[1].toLowerCase();
        if (AMPM == "pm" && hours < 12) hours = hours + 12;
        if (AMPM == "am" && hours == 12) hours = hours - 12;
        var sHours = hours.toString();
        var sMinutes = minutes.toString();
        if (hours < 10) sHours = "0" + sHours;
        if (minutes < 10) sMinutes = "0" + sMinutes;
        var actStartTime = new Date($('#actStartDate').val() + ' ' + sHours + ':' + sMinutes);
        var pgetime = $('#actEndTime').val();

        var pghours = Number(pgetime.match(/^(\d+)/)[1]);
        var pgminutes = Number(pgetime.match(/:(\d+)/)[1]);
        var pgAMPM = pgetime.match(/\s(.*)$/)[1].toLowerCase();
        if (pgAMPM == "pm" && pghours < 12) pghours = pghours + 12;
        if (pgAMPM == "am" && pghours == 12) pghours = pghours - 12;
        var pgsHours = pghours.toString();
        var pgsMinutes = pgminutes.toString();
        if (pghours < 10) pgsHours = "0" + pgsHours;
        if (pgminutes < 10) pgsMinutes = "0" + pgsMinutes;
        var pgesHours = pghours.toString();
        var pgesMinutes = pgminutes.toString();
        if (pgesMinutes < 10) pgesHours = "0" + pgesHours;
        if (pgesMinutes < 10) pgesMinutes = "0" + pgesMinutes;
        var actEndDate = new Date($('#actEndDate').val() + ' ' + pgesHours + ':' + pgesMinutes);
        var diffMs = (actEndDate - actStartTime); // milliseconds between now & Christmas
        var diffDays = Math.floor(diffMs / 86400000); // days
        var diffHrs = Math.floor((diffMs % 86400000) / 3600000); // hours
        var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
        $('#divpopMessage').empty();
        if (actEndDate <= actStartTime) {
            $('#actEndTime').css('border-color', 'red');
            $('#divpopMessage').css('color', 'red');
            $('#divpopMessage').append("Activity End Time Sholud Be Grether Than Strat Time");
            $('#actEndTime').val('');
            return false;
        }
        else {
            $('#actEndTime').css('border-color', '');
        }
        if (diffDays > 0 || diffHrs > 0 || diffMins > 0) {
            $("#txtActivityDuration").val(diffDays + " Day " + diffHrs + " Hours " + diffMins + " Minutes");
        }
    }
    function UpdateActivityDateCal() {
        var time = $('#actPopUpStartTime').val();
        var hours = Number(time.match(/^(\d+)/)[1]);
        var minutes = Number(time.match(/:(\d+)/)[1]);
        var AMPM = time.match(/\s(.*)$/)[1].toLowerCase();
        if (AMPM == "pm" && hours < 12) hours = hours + 12;
        if (AMPM == "am" && hours == 12) hours = hours - 12;
        var sHours = hours.toString();
        var sMinutes = minutes.toString();
        if (hours < 10) sHours = "0" + sHours;
        if (minutes < 10) sMinutes = "0" + sMinutes;
        var actStartTime = new Date($('#actPopUpStartDate').val() + ' ' + sHours + ':' + sMinutes);
        var pgetime = $('#actPopUpEndTime').val();

        var pghours = Number(pgetime.match(/^(\d+)/)[1]);
        var pgminutes = Number(pgetime.match(/:(\d+)/)[1]);
        var pgAMPM = pgetime.match(/\s(.*)$/)[1].toLowerCase();
        if (pgAMPM == "pm" && pghours < 12) pghours = pghours + 12;
        if (pgAMPM == "am" && pghours == 12) pghours = pghours - 12;
        var pgsHours = pghours.toString();
        var pgsMinutes = pgminutes.toString();
        if (pghours < 10) pgsHours = "0" + pgsHours;
        if (pgminutes < 10) pgsMinutes = "0" + pgsMinutes;
        var pgesHours = pghours.toString();
        var pgesMinutes = pgminutes.toString();
        if (pgesMinutes < 10) pgesHours = "0" + pgesHours;
        if (pgesMinutes < 10) pgesMinutes = "0" + pgesMinutes;
        var actEndDate = new Date($('#actPopUpEndDate').val() + ' ' + pgesHours + ':' + pgesMinutes);
        var diffMs = (actEndDate - actStartTime); // milliseconds between now & Christmas
        var diffDays = Math.floor(diffMs / 86400000); // days
        var diffHrs = Math.floor((diffMs % 86400000) / 3600000); // hours
        var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
        $('#divpopMessage').empty();
        if (actEndDate <= actStartTime) {
            $('#actPopUpEndTime').css('border-color', 'red');
            $('#divpopMessage').css('color', 'red');
            $('#divpopMessage').append("Activity End Time Sholud Be Grether Than Strat Time");
            $('#actPopUpEndTime').val('');
            return false;
        }
        else {
            $('#actPopUpEndTime').css('border-color', '');
        }
        if (diffDays > 0 || diffHrs > 0 || diffMins > 0) {
            $("#txtPopUpActivityDuration").val(diffDays + " Day " + diffHrs + " Hours " + diffMins + " Minutes");
        }
    }

</script>

<!--Save AS Draft code-->
<script>
    var arrActivityID = []; var arrAlertsReminders = []; iarrAlertsReminders = 0;
    ActivityID = 0;

    var arrActivityName = []; var arrRemainder = []; iRemainder = 0;
    iarrActivityName = 0;

    var arrActivityDuration = []; var arrRemainderFrequency = []; iRemainderFrequency = 0;
    iarrActivityDuration = 0;

    var arrActivityStartDate = []; var arrNeedEmailTemplate = []; iNeedEmailTemplate = 0;
    iarrActivityStartDate = 0;

    var arrActivityEndDate = []; var arrEmailTemplateName = []; iEmailTemplateName = 0;
    iarrActivityEndDate = 0;

    var arrActivitySeq = []; var arrEmailTemplateBody = []; iEmailTemplateBody = 0;
    iarrActivitySeq = 0;

    var arrActivityUOM = []; var arrActivityStartTime = []; iActivityStartTime = 0;
    iarrActivityUOM = 0;

    var arrFeedBackNeed = []; var arrActivityEndTime = []; iActivityEndTime = 0;
    iarrFeedBackNeed = 0;
    function GetSaveConfigData() {
        var ProgramName = $('#txtProgramNameTextid').val().trim(/^\s+|\s+$/g, '');
        $.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getbytitle('ConfigParameters')/items?$filter=ProgramName eq %27" + ProgramName + "%27",
            type: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
                "content-type": "application/json;odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            success: function (d) {
                var arr = [];
                i = 0;
                $.each(d.d.results, function (index, results) {
                    if (results.Status == "Active") {
                        arr[i++] = index;
                    }
                });
                iarrAlertsReminders = 0; ActivityID = 0; iRemainder = 0; iarrActivityName = 0; iRemainderFrequency = 0;
                iarrActivityDuration = 0; iNeedEmailTemplate = 0;
                iarrActivityStartDate = 0; iEmailTemplateName = 0;
                iarrActivityEndDate = 0; iEmailTemplateBody = 0;
                iarrActivitySeq = 0; iActivityStartTime = 0;
                iarrActivityUOM = 0; iActivityEndTime = 0;
                iarrFeedBackNeed = 0;
                arrActivityID = []; arrAlertsReminders = [];
                arrActivityName = []; arrRemainder = []; arrActivityDuration = []; arrRemainderFrequency = [];
                arrActivityStartDate = []; arrNeedEmailTemplate = [];
                arrActivityEndDate = []; arrEmailTemplateName = []; 
                arrActivitySeq = []; arrEmailTemplateBody = []; 
                arrActivityUOM = []; arrActivityStartTime = []; 
                arrFeedBackNeed = []; arrActivityEndTime = [];
                for (var k = 0; k < arr.length; k++) {
                    var arrK = arr[k];
                    arrActivityID[ActivityID++] = d.d.results[arrK].ID;
                    arrActivityName[iarrActivityName++] = d.d.results[arrK].ActivityName;
                    arrActivityDuration[iarrActivityDuration++] = d.d.results[arrK].Duration;
                    arrActivityStartDate[iarrActivityStartDate++] = d.d.results[arrK].StartDate;
                    arrActivityEndDate[iarrActivityEndDate++] = d.d.results[arrK].EndDate;
                    arrActivitySeq[iarrActivitySeq++] = d.d.results[arrK].Sequence;
                    arrActivityUOM[iarrActivityUOM++] = d.d.results[arrK].UOM;
                    arrFeedBackNeed[iarrFeedBackNeed++] = d.d.results[arrK].FeedBackRequired;
                    arrAlertsReminders[iRemainder] = d.d.results[arrK].AlertsReminders;

                    arrRemainder[iRemainder++] = d.d.results[arrK].Remainder;
                    arrRemainderFrequency[iRemainderFrequency++] = d.d.results[arrK].RemainderFrequency;
                    arrNeedEmailTemplate[iNeedEmailTemplate++] = d.d.results[arrK].NeedEmailTemplate;
                    arrEmailTemplateName[iEmailTemplateName++] = d.d.results[arrK].EmailTemplateName;
                    arrEmailTemplateBody[iEmailTemplateBody++] = d.d.results[arrK].EmailTemplateBody;

                    arrActivityStartTime[iActivityStartTime++] = d.d.results[arrK].ActivityStartTime;
                    arrActivityEndTime[iActivityEndTime++] = d.d.results[arrK].ActivityEndTime;
                }
            },
            error: function () { console.log('fail'); }
        });
    }
    $('#btnSaveAsDraft').click(function () {
        if (validateSaveAsDraft()) {
            ProgramtionSaveAsDraft();
        }
    });
    function validateSaveAsDraft() {
        $('#divProgramActivityErrors').empty();
        $('#divProgramActivityErrors').css('color', '');
        var valid = true;
        var pgmStartDate = document.getElementById("txtProgramStartDate").value;
        var pgmEndtDate = document.getElementById("txtProgramEndDate").value;
        var ProgramStartDate = new Date(pgmStartDate);
        var ProgramEndDate = new Date(pgmEndtDate);
        var table = $("#tableActivity tbody");
        table.find('tr').each(function (i) {
            var $tds = $(this).find('td');
            var UOM = $tds.eq(2).text();
            var start = $tds.eq(3).text();
            var End = $tds.eq(4).text();
            $tds.eq(2).css("border-color", "");
            $tds.eq(3).css("border-color", "");
            $tds.eq(4).css("border-color", "");
            if (UOM == '' || UOM == null) {
                $tds.eq(2).css("border-color", "red");
                valid = false;
            }
            if (start == '' || start == 'MM/DD/YYYY') {
                $tds.eq(3).css("border-color", "red");
                $tds.eq(4).css("border-color", "red");
                valid = false;
            } if (start != '' || start != 'MM/DD/YYYY') {
                var strFdate = new Date(start);
                if (strFdate < ProgramStartDate || start > ProgramEndDate) {
                    $tds.eq(3).css("border-color", "red");
                    valid = false;
                }
            }
            if (End == '' || start == 'MM/DD/YYYY') {
                $tds.eq(4).css("border-color", "red");
                valid = false;

            } if (End != '' || End != 'MM/DD/YYYY') {
                var strEdate = new Date(End);
                if (strEdate < ProgramStartDate || strEdate > ProgramEndDate) {
                    $tds.eq(4).css("border-color", "red");
                    valid = false;
                }
            }
        });
        if (valid == false) {
            if ($('#tableActivity tr').length > 1) {
                $('#divProgramActivityErrors').css('color', 'red');
                $('#divProgramActivityErrors').append("Highlighted Fields Are Mandatory");
            }
        }
        return valid;
    }
    function ProgramtionSaveAsDraft() {
        var ProgramNameText = document.getElementById("txtProgramNameTextid").value.trim(/^\s+|\s+$/g, '');;
        var ProgramLocationText = document.getElementById("txtProgramLocationText").value;
        var ProgramVenue = document.getElementById("txtProgramVenue").value;
        var ProgramStatus = document.getElementById("ddlProgramStatus").value;
        var ProgramStartDate = document.getElementById("txtProgramStartDate").value;
        var ProgramEndDate = document.getElementById("txtProgramEndDate").value;
        var ProgramDesc = document.getElementById("txtProgramDesc").value;
        var PrgmRemainFr = $("#ddlProgramRemainderFrquency").val();
        var PrgmRemaintxt = $("#ddlProgramRemainderFrquency :selected").text();
        var CreatedByUserEmail = LoginUserEmail();
        var arrgetSaveAsDraftDetails = getSaveAsDraftDetails(ProgramNameText);
        GetSaveConfigData();
        if (arrActivityID.length > 0) {
            for (var i = 0; i < arrActivityID.length; i++) {
                var ActivityID = arrActivityID[i];
                var AcID = ActivityID.toString();
                if (arrgetSaveAsDraftDetails.length > 0) {
                    for (var j = 0; j < arrgetSaveAsDraftDetails.length; j++) {
                        var activityID = arrgetSaveAsDraftDetails[j].ActivityID;
                        var PgmID = arrgetSaveAsDraftDetails[j].PgmID;
                        if (activityID != AcID) {
                            var ActivityName = arrActivityName[i];
                            var ActivityDuration = arrActivityDuration[i];
                            var ActivityStartDate = arrActivityStartDate[i];
                            var ActivityEndDate = arrActivityEndDate[i];
                            var ActSeq = arrActivitySeq[i];
                            var ActUOM = arrActivityUOM[i];
                            var FeedBackNeed = arrFeedBackNeed[i];
                            var AlertsReminders = arrAlertsReminders[i];
                            var Remainder = arrRemainder[i];
                            var RemainderFrequency = arrRemainderFrequency[i];
                            var NeedEmailTemplate = arrNeedEmailTemplate[i];
                            var EmailTemplateBody = arrEmailTemplateBody[i];
                            var ActivityStartTime = arrActivityStartTime[i];
                            var ActivityEndTime = arrActivityEndTime[i];
                            var EmailTemplateName = arrEmailTemplateName[i];


                            var pgrmSdate = new Date(ProgramStartDate);
                            var pgrmEdate = new Date(ProgramEndDate);
                            var actSdate = new Date(arrActivityStartDate[i]);
                            var actEDate = new Date(arrActivityEndDate[i]);

                            var millisecondsPerDay = 1000 * 60 * 60 * 24;

                            var millisBetween = actSdate.getTime() - pgrmSdate.getTime();
                            var days = millisBetween / millisecondsPerDay;
                            var noof = parseInt(days) + 1;
                            var Datewise = "Day " + noof + " " + arrActivityStartDate[i];
                            var Sequnce = parseInt(ActSeq);

                            $.ajax({
                                url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('NewInductionProgram')/items",
                                type: "POST",
                                async: false,
                                data: JSON.stringify({
                                    '__metadata': { 'type': 'SP.Data.NewInductionProgramListItem' },
                                    'Title': ProgramNameText,
                                    'ProgramName': ProgramNameText,
                                    'ProgramStartDate': ProgramStartDate,
                                    'ProgramEndDate': ProgramEndDate,
                                    'ProgramLocation': ProgramLocationText,
                                    'ProgramVenue': ProgramVenue,
                                    'ProgramDesc': ProgramDesc,
                                    'RemainderFrValue': PrgmRemainFr,
                                    'RemainderFrText': PrgmRemaintxt,
                                    'ActivityEndTime': ActivityStartTime,
                                    'ActivityStartTime': ActivityEndTime,
                                    'ActivityID': AcID,
                                    'ActivityName': ActivityName,
                                    'ActivityDuration': ActivityDuration,
                                    'ActivityStartDate': ActivityStartDate,
                                    'ActivityEndDate': ActivityEndDate,
                                    'actSequence': Sequnce,
                                    'UOM': ActUOM,
                                    'FeedBackNeed': FeedBackNeed,
                                    'ProgramStatus': ProgramStatus,
                                    'Status': 'SaveAsDraft',
                                    'DayWise': Datewise,

                                    'Remainder': Remainder,
                                    'RemainderFrequency': RemainderFrequency,
                                    'NeedEmailTemplate': NeedEmailTemplate,
                                    'EmailTemplateName': EmailTemplateName,
                                    'EmailTemplateBody': EmailTemplateBody,
                                    'CreatedByUser': CreatedByUserEmail,


                                }),
                                headers: {
                                    "Accept": "application/json;odata=verbose",
                                    "content-type": "application/json; odata=verbose",
                                    "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                                },
                                success: function (data) {
                                    //alert("Program Created successfully");
                                },
                                error: function (err) {
                                    alert("Error while adding item: " + JSON.stringify(err));
                                }
                            });
                        }
                        else {
                            var ActivityName = arrActivityName[i];
                            var ActivityDuration = arrActivityDuration[i];
                            var ActivityStartDate = arrActivityStartDate[i];
                            var ActivityEndDate = arrActivityEndDate[i];
                            var ActSeq = arrActivitySeq[i];
                            var ActUOM = arrActivityUOM[i];
                            var FeedBackNeed = arrFeedBackNeed[i];
                            var AlertsReminders = arrAlertsReminders[i];
                            var Remainder = arrRemainder[i];
                            var RemainderFrequency = arrRemainderFrequency[i];
                            var NeedEmailTemplate = arrNeedEmailTemplate[i];
                            var EmailTemplateBody = arrEmailTemplateBody[i];
                            var ActivityStartTime = arrActivityStartTime[i];
                            var ActivityEndTime = arrActivityEndTime[i];
                            var EmailTemplateName = arrEmailTemplateName[i];


                            var pgrmSdate = new Date(ProgramStartDate);
                            var pgrmEdate = new Date(ProgramEndDate);
                            var actSdate = new Date(arrActivityStartDate[i]);
                            var actEDate = new Date(arrActivityEndDate[i]);

                            var millisecondsPerDay = 1000 * 60 * 60 * 24;

                            var millisBetween = actSdate.getTime() - pgrmSdate.getTime();
                            var days = millisBetween / millisecondsPerDay;
                            var noof = parseInt(days) + 1;
                            var Datewise = "Day " + noof + " " + arrActivityStartDate[i];
                            var Sequnce = parseInt(ActSeq);

                            $.ajax({
                                url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('NewInductionProgram')/items(" + PgmID + ")",
                                type: "POST",
                                async: false,
                                data: JSON.stringify({
                                    '__metadata': { 'type': 'SP.Data.NewInductionProgramListItem' },
                                    'Title': ProgramNameText,
                                    'ProgramName': ProgramNameText,
                                    'ProgramStartDate': ProgramStartDate,
                                    'ProgramEndDate': ProgramEndDate,
                                    'ProgramLocation': ProgramLocationText,
                                    'ProgramVenue': ProgramVenue,
                                    'ProgramDesc': ProgramDesc,
                                    'RemainderFrValue': PrgmRemainFr,
                                    'RemainderFrText': PrgmRemaintxt,
                                    'ActivityEndTime': ActivityStartTime,
                                    'ActivityStartTime': ActivityEndTime,
                                    'ActivityID': AcID,
                                    'ActivityName': ActivityName,
                                    'ActivityDuration': ActivityDuration,
                                    'ActivityStartDate': ActivityStartDate,
                                    'ActivityEndDate': ActivityEndDate,
                                    'actSequence': Sequnce,
                                    'UOM': ActUOM,
                                    'FeedBackNeed': FeedBackNeed,
                                    'ProgramStatus': ProgramStatus,
                                    'Status': 'SaveAsDraft',
                                    'DayWise': Datewise,

                                    'Remainder': Remainder,
                                    'RemainderFrequency': RemainderFrequency,
                                    'NeedEmailTemplate': NeedEmailTemplate,
                                    'EmailTemplateName': EmailTemplateName,
                                    'EmailTemplateBody': EmailTemplateBody,
                                    'CreatedByUser': CreatedByUserEmail,


                                }),
                                headers: {
                                    "Accept": "application/json;odata=verbose",
                                    "content-type": "application/json; odata=verbose",
                                    "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                                    "X-HTTP-Method": "MERGE",
                                    "If-Match": "*"
                                },
                                success: function (data) {
                                    //alert("Program Created successfully");
                                },
                                error: function (err) {
                                    alert("Error while adding item: " + JSON.stringify(err));
                                }
                            });
                        }

                    }
                }
                var ActivityName = arrActivityName[i];
                var ActivityDuration = arrActivityDuration[i];
                var ActivityStartDate = arrActivityStartDate[i];
                var ActivityEndDate = arrActivityEndDate[i];
                var ActSeq = arrActivitySeq[i];
                var ActUOM = arrActivityUOM[i];
                var FeedBackNeed = arrFeedBackNeed[i];
                var AlertsReminders = arrAlertsReminders[i];
                var Remainder = arrRemainder[i];
                var RemainderFrequency = arrRemainderFrequency[i];
                var NeedEmailTemplate = arrNeedEmailTemplate[i];
                var EmailTemplateBody = arrEmailTemplateBody[i];
                var ActivityStartTime = arrActivityStartTime[i];
                var ActivityEndTime = arrActivityEndTime[i];
                var EmailTemplateName = arrEmailTemplateName[i];


                var pgrmSdate = new Date(ProgramStartDate);
                var pgrmEdate = new Date(ProgramEndDate);
                var actSdate = new Date(arrActivityStartDate[i]);
                var actEDate = new Date(arrActivityEndDate[i]);

                var millisecondsPerDay = 1000 * 60 * 60 * 24;

                var millisBetween = actSdate.getTime() - pgrmSdate.getTime();
                var days = millisBetween / millisecondsPerDay;
                var noof = parseInt(days) + 1;
                var Datewise = "Day " + noof + " " + arrActivityStartDate[i];
                var Sequnce = parseInt(ActSeq);

                $.ajax({
                    url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('NewInductionProgram')/items",
                    type: "POST",
                    async: false,
                    data: JSON.stringify({
                        '__metadata': { 'type': 'SP.Data.NewInductionProgramListItem' },
                        'Title': ProgramNameText,
                        'ProgramName': ProgramNameText,
                        'ProgramStartDate': ProgramStartDate,
                        'ProgramEndDate': ProgramEndDate,
                        'ProgramLocation': ProgramLocationText,
                        'ProgramVenue': ProgramVenue,
                        'ProgramDesc': ProgramDesc,
                        'RemainderFrValue': PrgmRemainFr,
                        'RemainderFrText': PrgmRemaintxt,
                        'ActivityEndTime': ActivityStartTime,
                        'ActivityStartTime': ActivityEndTime,
                        'ActivityID': AcID,
                        'ActivityName': ActivityName,
                        'ActivityDuration': ActivityDuration,
                        'ActivityStartDate': ActivityStartDate,
                        'ActivityEndDate': ActivityEndDate,
                        'actSequence': Sequnce,
                        'UOM': ActUOM,
                        'FeedBackNeed': FeedBackNeed,
                        'ProgramStatus': ProgramStatus,
                        'Status': 'SaveAsDraft',
                        'DayWise': Datewise,

                        'Remainder': Remainder,
                        'RemainderFrequency': RemainderFrequency,
                        'NeedEmailTemplate': NeedEmailTemplate,
                        'EmailTemplateName': EmailTemplateName,
                        'EmailTemplateBody': EmailTemplateBody,
                        'CreatedByUser': CreatedByUserEmail,


                    }),
                    headers: {
                        "Accept": "application/json;odata=verbose",
                        "content-type": "application/json; odata=verbose",
                        "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                    },
                    success: function (data) {
                        //alert("Program Created successfully");
                    },
                    error: function (err) {
                        alert("Error while adding item: " + JSON.stringify(err));
                    }
                });

            }
        }
        else {
            $.ajax({
                url: _spPageContextInfo.webAbsoluteUrl + "//_api/web/lists/getbytitle('NewInductionProgram')/items",
                type: "POST",
                async: false,
                data: JSON.stringify({
                    '__metadata': { 'type': 'SP.Data.NewInductionProgramListItem' },
                    'Title': ProgramNameText,
                    'ProgramName': ProgramNameText,
                    'ProgramStartDate': ProgramStartDate,
                    'ProgramEndDate': ProgramEndDate,
                    'ProgramLocation': ProgramLocationText,
                    'ProgramVenue': ProgramVenue,
                    'ProgramDesc': ProgramDesc,
                    'RemainderFrValue': PrgmRemainFr,
                    'RemainderFrText': PrgmRemaintxt,
                    'ProgramStatus': ProgramStatus,
                    'Status': 'SaveAsDraft',
                    'CreatedByUser': CreatedByUserEmail,
                }),
                headers: {
                    "Accept": "application/json;odata=verbose",
                    "content-type": "application/json; odata=verbose",
                    "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                },
                success: function (data) {
                    //alert("Program Created successfully");
                },
                error: function (err) {
                    alert("Error while adding item: " + JSON.stringify(err));
                }
            });
        }
        alert("Program Saved As Draft.");
        GetActivityData();
    }
    function getSaveAsDraftDetails(ProgramName){
        var getAllSaveAsDraftDetails = [];
        $.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getbytitle('NewInductionProgram')/items?$filter=ProgramName eq  '" + ProgramName + "'",
            type: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
                "content-type": "application/json;odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val()
            },
            success: function (d) {
                var arr = [];
                i = 0;
                $.each(d.d.results, function (index, results) {
                    arr[i++] = index;
                });
                getAllSaveAsDraftDetails = [];
                for (var k = 0; k < arr.length; k++) {
                    var arrK = arr[k];
                    var ActivityID = d.d.results[arrK].ActivityID;
                    var PgmID = d.d.results[arrK].ID;
                    getAllSaveAsDraftDetails.push({
                        ActivityID: ActivityID, PgmID: PgmID
                    });
                }
            },
            error: function () { console.log('fail'); }
        });
        return getAllSaveAsDraftDetails;
    }
</script>


<!--End Of Save as Draft Code-->